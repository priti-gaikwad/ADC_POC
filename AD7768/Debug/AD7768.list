
AD7768.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bdc  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002a8  24000010  08006ef4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002b8  08006ef4  000202b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015c60  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000251a  00000000  00000000  00035ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001200  00000000  00000000  00038200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e21  00000000  00000000  00039400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00030f12  00000000  00000000  0003a221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000161a4  00000000  00000000  0006b133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00145506  00000000  00000000  000812d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004dac  00000000  00000000  001c67e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005f  00000000  00000000  001cb58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08006e70 	.word	0x08006e70

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08006e70 	.word	0x08006e70

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000300:	f000 b970 	b.w	80005e4 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9e08      	ldr	r6, [sp, #32]
 8000322:	460d      	mov	r5, r1
 8000324:	4604      	mov	r4, r0
 8000326:	460f      	mov	r7, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14a      	bne.n	80003c2 <__udivmoddi4+0xa6>
 800032c:	428a      	cmp	r2, r1
 800032e:	4694      	mov	ip, r2
 8000330:	d965      	bls.n	80003fe <__udivmoddi4+0xe2>
 8000332:	fab2 f382 	clz	r3, r2
 8000336:	b143      	cbz	r3, 800034a <__udivmoddi4+0x2e>
 8000338:	fa02 fc03 	lsl.w	ip, r2, r3
 800033c:	f1c3 0220 	rsb	r2, r3, #32
 8000340:	409f      	lsls	r7, r3
 8000342:	fa20 f202 	lsr.w	r2, r0, r2
 8000346:	4317      	orrs	r7, r2
 8000348:	409c      	lsls	r4, r3
 800034a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034e:	fa1f f58c 	uxth.w	r5, ip
 8000352:	fbb7 f1fe 	udiv	r1, r7, lr
 8000356:	0c22      	lsrs	r2, r4, #16
 8000358:	fb0e 7711 	mls	r7, lr, r1, r7
 800035c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000360:	fb01 f005 	mul.w	r0, r1, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90a      	bls.n	800037e <__udivmoddi4+0x62>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000370:	f080 811c 	bcs.w	80005ac <__udivmoddi4+0x290>
 8000374:	4290      	cmp	r0, r2
 8000376:	f240 8119 	bls.w	80005ac <__udivmoddi4+0x290>
 800037a:	3902      	subs	r1, #2
 800037c:	4462      	add	r2, ip
 800037e:	1a12      	subs	r2, r2, r0
 8000380:	b2a4      	uxth	r4, r4
 8000382:	fbb2 f0fe 	udiv	r0, r2, lr
 8000386:	fb0e 2210 	mls	r2, lr, r0, r2
 800038a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038e:	fb00 f505 	mul.w	r5, r0, r5
 8000392:	42a5      	cmp	r5, r4
 8000394:	d90a      	bls.n	80003ac <__udivmoddi4+0x90>
 8000396:	eb1c 0404 	adds.w	r4, ip, r4
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x294>
 80003a2:	42a5      	cmp	r5, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x294>
 80003a8:	4464      	add	r4, ip
 80003aa:	3802      	subs	r0, #2
 80003ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	2100      	movs	r1, #0
 80003b4:	b11e      	cbz	r6, 80003be <__udivmoddi4+0xa2>
 80003b6:	40dc      	lsrs	r4, r3
 80003b8:	2300      	movs	r3, #0
 80003ba:	e9c6 4300 	strd	r4, r3, [r6]
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d908      	bls.n	80003d8 <__udivmoddi4+0xbc>
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f000 80ed 	beq.w	80005a6 <__udivmoddi4+0x28a>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e9c6 0500 	strd	r0, r5, [r6]
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	d149      	bne.n	8000474 <__udivmoddi4+0x158>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d302      	bcc.n	80003ea <__udivmoddi4+0xce>
 80003e4:	4282      	cmp	r2, r0
 80003e6:	f200 80f8 	bhi.w	80005da <__udivmoddi4+0x2be>
 80003ea:	1a84      	subs	r4, r0, r2
 80003ec:	eb65 0203 	sbc.w	r2, r5, r3
 80003f0:	2001      	movs	r0, #1
 80003f2:	4617      	mov	r7, r2
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d0e2      	beq.n	80003be <__udivmoddi4+0xa2>
 80003f8:	e9c6 4700 	strd	r4, r7, [r6]
 80003fc:	e7df      	b.n	80003be <__udivmoddi4+0xa2>
 80003fe:	b902      	cbnz	r2, 8000402 <__udivmoddi4+0xe6>
 8000400:	deff      	udf	#255	; 0xff
 8000402:	fab2 f382 	clz	r3, r2
 8000406:	2b00      	cmp	r3, #0
 8000408:	f040 8090 	bne.w	800052c <__udivmoddi4+0x210>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	2101      	movs	r1, #1
 8000418:	fbb2 f5f7 	udiv	r5, r2, r7
 800041c:	fb07 2015 	mls	r0, r7, r5, r2
 8000420:	0c22      	lsrs	r2, r4, #16
 8000422:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000426:	fb0e f005 	mul.w	r0, lr, r5
 800042a:	4290      	cmp	r0, r2
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x124>
 800042e:	eb1c 0202 	adds.w	r2, ip, r2
 8000432:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000436:	d202      	bcs.n	800043e <__udivmoddi4+0x122>
 8000438:	4290      	cmp	r0, r2
 800043a:	f200 80cb 	bhi.w	80005d4 <__udivmoddi4+0x2b8>
 800043e:	4645      	mov	r5, r8
 8000440:	1a12      	subs	r2, r2, r0
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb2 f0f7 	udiv	r0, r2, r7
 8000448:	fb07 2210 	mls	r2, r7, r0, r2
 800044c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000450:	fb0e fe00 	mul.w	lr, lr, r0
 8000454:	45a6      	cmp	lr, r4
 8000456:	d908      	bls.n	800046a <__udivmoddi4+0x14e>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000460:	d202      	bcs.n	8000468 <__udivmoddi4+0x14c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f200 80bb 	bhi.w	80005de <__udivmoddi4+0x2c2>
 8000468:	4610      	mov	r0, r2
 800046a:	eba4 040e 	sub.w	r4, r4, lr
 800046e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000472:	e79f      	b.n	80003b4 <__udivmoddi4+0x98>
 8000474:	f1c1 0720 	rsb	r7, r1, #32
 8000478:	408b      	lsls	r3, r1
 800047a:	fa22 fc07 	lsr.w	ip, r2, r7
 800047e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000482:	fa05 f401 	lsl.w	r4, r5, r1
 8000486:	fa20 f307 	lsr.w	r3, r0, r7
 800048a:	40fd      	lsrs	r5, r7
 800048c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000490:	4323      	orrs	r3, r4
 8000492:	fbb5 f8f9 	udiv	r8, r5, r9
 8000496:	fa1f fe8c 	uxth.w	lr, ip
 800049a:	fb09 5518 	mls	r5, r9, r8, r5
 800049e:	0c1c      	lsrs	r4, r3, #16
 80004a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a4:	fb08 f50e 	mul.w	r5, r8, lr
 80004a8:	42a5      	cmp	r5, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	fa00 f001 	lsl.w	r0, r0, r1
 80004b2:	d90b      	bls.n	80004cc <__udivmoddi4+0x1b0>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004bc:	f080 8088 	bcs.w	80005d0 <__udivmoddi4+0x2b4>
 80004c0:	42a5      	cmp	r5, r4
 80004c2:	f240 8085 	bls.w	80005d0 <__udivmoddi4+0x2b4>
 80004c6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ca:	4464      	add	r4, ip
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	b29d      	uxth	r5, r3
 80004d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d4:	fb09 4413 	mls	r4, r9, r3, r4
 80004d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e0:	45a6      	cmp	lr, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x1da>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004ec:	d26c      	bcs.n	80005c8 <__udivmoddi4+0x2ac>
 80004ee:	45a6      	cmp	lr, r4
 80004f0:	d96a      	bls.n	80005c8 <__udivmoddi4+0x2ac>
 80004f2:	3b02      	subs	r3, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fa:	fba3 9502 	umull	r9, r5, r3, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	42ac      	cmp	r4, r5
 8000504:	46c8      	mov	r8, r9
 8000506:	46ae      	mov	lr, r5
 8000508:	d356      	bcc.n	80005b8 <__udivmoddi4+0x29c>
 800050a:	d053      	beq.n	80005b4 <__udivmoddi4+0x298>
 800050c:	b156      	cbz	r6, 8000524 <__udivmoddi4+0x208>
 800050e:	ebb0 0208 	subs.w	r2, r0, r8
 8000512:	eb64 040e 	sbc.w	r4, r4, lr
 8000516:	fa04 f707 	lsl.w	r7, r4, r7
 800051a:	40ca      	lsrs	r2, r1
 800051c:	40cc      	lsrs	r4, r1
 800051e:	4317      	orrs	r7, r2
 8000520:	e9c6 7400 	strd	r7, r4, [r6]
 8000524:	4618      	mov	r0, r3
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	f1c3 0120 	rsb	r1, r3, #32
 8000530:	fa02 fc03 	lsl.w	ip, r2, r3
 8000534:	fa20 f201 	lsr.w	r2, r0, r1
 8000538:	fa25 f101 	lsr.w	r1, r5, r1
 800053c:	409d      	lsls	r5, r3
 800053e:	432a      	orrs	r2, r5
 8000540:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fbb1 f0f7 	udiv	r0, r1, r7
 800054c:	fb07 1510 	mls	r5, r7, r0, r1
 8000550:	0c11      	lsrs	r1, r2, #16
 8000552:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000556:	fb00 f50e 	mul.w	r5, r0, lr
 800055a:	428d      	cmp	r5, r1
 800055c:	fa04 f403 	lsl.w	r4, r4, r3
 8000560:	d908      	bls.n	8000574 <__udivmoddi4+0x258>
 8000562:	eb1c 0101 	adds.w	r1, ip, r1
 8000566:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056a:	d22f      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800056c:	428d      	cmp	r5, r1
 800056e:	d92d      	bls.n	80005cc <__udivmoddi4+0x2b0>
 8000570:	3802      	subs	r0, #2
 8000572:	4461      	add	r1, ip
 8000574:	1b49      	subs	r1, r1, r5
 8000576:	b292      	uxth	r2, r2
 8000578:	fbb1 f5f7 	udiv	r5, r1, r7
 800057c:	fb07 1115 	mls	r1, r7, r5, r1
 8000580:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000584:	fb05 f10e 	mul.w	r1, r5, lr
 8000588:	4291      	cmp	r1, r2
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x282>
 800058c:	eb1c 0202 	adds.w	r2, ip, r2
 8000590:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000594:	d216      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000596:	4291      	cmp	r1, r2
 8000598:	d914      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	1a52      	subs	r2, r2, r1
 80005a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a4:	e738      	b.n	8000418 <__udivmoddi4+0xfc>
 80005a6:	4631      	mov	r1, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e708      	b.n	80003be <__udivmoddi4+0xa2>
 80005ac:	4639      	mov	r1, r7
 80005ae:	e6e6      	b.n	800037e <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x90>
 80005b4:	4548      	cmp	r0, r9
 80005b6:	d2a9      	bcs.n	800050c <__udivmoddi4+0x1f0>
 80005b8:	ebb9 0802 	subs.w	r8, r9, r2
 80005bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c0:	3b01      	subs	r3, #1
 80005c2:	e7a3      	b.n	800050c <__udivmoddi4+0x1f0>
 80005c4:	4645      	mov	r5, r8
 80005c6:	e7ea      	b.n	800059e <__udivmoddi4+0x282>
 80005c8:	462b      	mov	r3, r5
 80005ca:	e794      	b.n	80004f6 <__udivmoddi4+0x1da>
 80005cc:	4640      	mov	r0, r8
 80005ce:	e7d1      	b.n	8000574 <__udivmoddi4+0x258>
 80005d0:	46d0      	mov	r8, sl
 80005d2:	e77b      	b.n	80004cc <__udivmoddi4+0x1b0>
 80005d4:	3d02      	subs	r5, #2
 80005d6:	4462      	add	r2, ip
 80005d8:	e732      	b.n	8000440 <__udivmoddi4+0x124>
 80005da:	4608      	mov	r0, r1
 80005dc:	e70a      	b.n	80003f4 <__udivmoddi4+0xd8>
 80005de:	4464      	add	r4, ip
 80005e0:	3802      	subs	r0, #2
 80005e2:	e742      	b.n	800046a <__udivmoddi4+0x14e>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f043 0201 	orr.w	r2, r3, #1
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	601a      	str	r2, [r3, #0]
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_SPI_StartMasterTransfer>:
  * @rmtoll CR1          CSTART        LL_SPI_StartMasterTransfer
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_StartMasterTransfer(SPI_TypeDef *SPIx)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	601a      	str	r2, [r3, #0]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <LL_SPI_IsActiveFlag_RXP>:
  * @rmtoll SR           RXP           LL_SPI_IsActiveFlag_RXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXP(const SPI_TypeDef *SPIx)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	2b01      	cmp	r3, #1
 800063a:	d101      	bne.n	8000640 <LL_SPI_IsActiveFlag_RXP+0x18>
 800063c:	2301      	movs	r3, #1
 800063e:	e000      	b.n	8000642 <LL_SPI_IsActiveFlag_RXP+0x1a>
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <LL_SPI_IsActiveFlag_TXP>:
  * @rmtoll SR           TXP           LL_SPI_IsActiveFlag_TXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXP(const SPI_TypeDef *SPIx)
{
 800064e:	b480      	push	{r7}
 8000650:	b083      	sub	sp, #12
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	2b02      	cmp	r3, #2
 8000660:	d101      	bne.n	8000666 <LL_SPI_IsActiveFlag_TXP+0x18>
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <LL_SPI_IsActiveFlag_TXP+0x1a>
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <LL_SPI_ClearFlag_EOT>:
  * @rmtoll IFCR         EOTC          LL_SPI_ClearFlag_EOT
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_EOT(SPI_TypeDef *SPIx)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->IFCR, SPI_IFCR_EOTC);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f043 0208 	orr.w	r2, r3, #8
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	619a      	str	r2, [r3, #24]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx) /* Derogation MISRAC2012-Rule-8.13 */
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3330      	adds	r3, #48	; 0x30
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b2db      	uxtb	r3, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b4:	f000 ff42 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b8:	f000 f8ae 	bl	8000818 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006bc:	f000 f922 	bl	8000904 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 fb1a 	bl	8000cf8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006c4:	f000 f94e 	bl	8000964 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006c8:	f000 f9a4 	bl	8000a14 <MX_SPI2_Init>
  MX_TIM3_Init();
 80006cc:	f000 fa52 	bl	8000b74 <MX_TIM3_Init>
  MX_UART4_Init();
 80006d0:	f000 fac6 	bl	8000c60 <MX_UART4_Init>
  MX_SPI3_Init();
 80006d4:	f000 f9f6 	bl	8000ac4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

//  SPI2_INIT(3);
   SPI_ll_init();
 80006d8:	f000 fc5c 	bl	8000f94 <SPI_ll_init>
	/*** Timer 3 ch 2 --> 17 Mhz ***/
	//  TIM3->CCR2 = 8;
	//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);

	/** RESET **/
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2108      	movs	r1, #8
 80006e0:	4846      	ldr	r0, [pc, #280]	; (80007fc <main+0x14c>)
 80006e2:	f001 fa8d 	bl	8001c00 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

/* RESET trigger register = 0x1D */
	tx_data[0] = 0x1D;      //for write  operation
 80006e6:	4b46      	ldr	r3, [pc, #280]	; (8000800 <main+0x150>)
 80006e8:	221d      	movs	r2, #29
 80006ea:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x80;		// default value
 80006ec:	4b44      	ldr	r3, [pc, #272]	; (8000800 <main+0x150>)
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	705a      	strb	r2, [r3, #1]
	GPIOE->BSRR |= CS1_LOW;
 80006f2:	4b44      	ldr	r3, [pc, #272]	; (8000804 <main+0x154>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a43      	ldr	r2, [pc, #268]	; (8000804 <main+0x154>)
 80006f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006fc:	6193      	str	r3, [r2, #24]
//	HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, HAL_MAX_DELAY);
	SPI_rxtx(tx_data, rx_data, 2);
 80006fe:	2202      	movs	r2, #2
 8000700:	4941      	ldr	r1, [pc, #260]	; (8000808 <main+0x158>)
 8000702:	483f      	ldr	r0, [pc, #252]	; (8000800 <main+0x150>)
 8000704:	f000 fbc2 	bl	8000e8c <SPI_rxtx>
	GPIOE->BSRR |= CS1_HIGH;
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <main+0x154>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a3d      	ldr	r2, [pc, #244]	; (8000804 <main+0x154>)
 800070e:	f043 0308 	orr.w	r3, r3, #8
 8000712:	6193      	str	r3, [r2, #24]

/* write interface format = 0x14*/
	tx_data[0] = 0x14;      //for write  operation
 8000714:	4b3a      	ldr	r3, [pc, #232]	; (8000800 <main+0x150>)
 8000716:	2214      	movs	r2, #20
 8000718:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x01;		// enable continuous read mode.
 800071a:	4b39      	ldr	r3, [pc, #228]	; (8000800 <main+0x150>)
 800071c:	2201      	movs	r2, #1
 800071e:	705a      	strb	r2, [r3, #1]
	GPIOE->BSRR |= CS1_LOW;
 8000720:	4b38      	ldr	r3, [pc, #224]	; (8000804 <main+0x154>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a37      	ldr	r2, [pc, #220]	; (8000804 <main+0x154>)
 8000726:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800072a:	6193      	str	r3, [r2, #24]
//	HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, HAL_MAX_DELAY);
	SPI_rxtx(tx_data, rx_data, 2);
 800072c:	2202      	movs	r2, #2
 800072e:	4936      	ldr	r1, [pc, #216]	; (8000808 <main+0x158>)
 8000730:	4833      	ldr	r0, [pc, #204]	; (8000800 <main+0x150>)
 8000732:	f000 fbab 	bl	8000e8c <SPI_rxtx>
	GPIOE->BSRR |= CS1_HIGH;
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <main+0x154>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a32      	ldr	r2, [pc, #200]	; (8000804 <main+0x154>)
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	6193      	str	r3, [r2, #24]

/* Power and clock register = 0x15 */
	tx_data[0] = 0x15;      //for write  operation
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <main+0x150>)
 8000744:	2215      	movs	r2, #21
 8000746:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x22;		// mclk/4,PWRMODE
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <main+0x150>)
 800074a:	2222      	movs	r2, #34	; 0x22
 800074c:	705a      	strb	r2, [r3, #1]
	GPIOE->BSRR |= CS1_LOW;
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <main+0x154>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a2c      	ldr	r2, [pc, #176]	; (8000804 <main+0x154>)
 8000754:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000758:	6193      	str	r3, [r2, #24]
//	HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, HAL_MAX_DELAY);
	SPI_rxtx(tx_data, rx_data, 2);
 800075a:	2202      	movs	r2, #2
 800075c:	492a      	ldr	r1, [pc, #168]	; (8000808 <main+0x158>)
 800075e:	4828      	ldr	r0, [pc, #160]	; (8000800 <main+0x150>)
 8000760:	f000 fb94 	bl	8000e8c <SPI_rxtx>
	GPIOE->BSRR |= CS1_HIGH;
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <main+0x154>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a26      	ldr	r2, [pc, #152]	; (8000804 <main+0x154>)
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	6193      	str	r3, [r2, #24]

/* Digital filter = 0x19*/
	tx_data[0] = 0x19;      //for write  operation
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <main+0x150>)
 8000772:	2219      	movs	r2, #25
 8000774:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x60;		// low FIR filter,X32
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <main+0x150>)
 8000778:	2260      	movs	r2, #96	; 0x60
 800077a:	705a      	strb	r2, [r3, #1]
	GPIOE->BSRR |= CS1_LOW;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <main+0x154>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a20      	ldr	r2, [pc, #128]	; (8000804 <main+0x154>)
 8000782:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000786:	6193      	str	r3, [r2, #24]
//	HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, HAL_MAX_DELAY);
	SPI_rxtx(tx_data, rx_data, 2);
 8000788:	2202      	movs	r2, #2
 800078a:	491f      	ldr	r1, [pc, #124]	; (8000808 <main+0x158>)
 800078c:	481c      	ldr	r0, [pc, #112]	; (8000800 <main+0x150>)
 800078e:	f000 fb7d 	bl	8000e8c <SPI_rxtx>
	GPIOE->BSRR |= CS1_HIGH;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <main+0x154>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <main+0x154>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	6193      	str	r3, [r2, #24]


/******* SYNC PULSE *******/
	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) == 0);
 800079e:	bf00      	nop
 80007a0:	2104      	movs	r1, #4
 80007a2:	4816      	ldr	r0, [pc, #88]	; (80007fc <main+0x14c>)
 80007a4:	f001 fa14 	bl	8001bd0 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d0f8      	beq.n	80007a0 <main+0xf0>

//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
//	HAL_Delay(1);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2108      	movs	r1, #8
 80007b2:	4812      	ldr	r0, [pc, #72]	; (80007fc <main+0x14c>)
 80007b4:	f001 fa24 	bl	8001c00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 ff51 	bl	8001660 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2108      	movs	r1, #8
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <main+0x14c>)
 80007c4:	f001 fa1c 	bl	8001c00 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 ff49 	bl	8001660 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2101      	movs	r1, #1
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <main+0x15c>)
 80007d4:	f001 fa14 	bl	8001c00 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80007d8:	200a      	movs	r0, #10
 80007da:	f000 ff41 	bl	8001660 <HAL_Delay>
	HAL_UART_Transmit(&huart4, "\ninput = 1902.3\n\r", 20, HAL_MAX_DELAY);
 80007de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007e2:	2214      	movs	r2, #20
 80007e4:	490a      	ldr	r1, [pc, #40]	; (8000810 <main+0x160>)
 80007e6:	480b      	ldr	r0, [pc, #44]	; (8000814 <main+0x164>)
 80007e8:	f005 f8f8 	bl	80059dc <HAL_UART_Transmit>
//	HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 3, HAL_MAX_DELAY);

while(1){
	while(1)
	{
		HAL_UART_Transmit(&huart4, "\ninput = 1902.3\n\r", 20, HAL_MAX_DELAY);
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007f0:	2214      	movs	r2, #20
 80007f2:	4907      	ldr	r1, [pc, #28]	; (8000810 <main+0x160>)
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <main+0x164>)
 80007f6:	f005 f8f1 	bl	80059dc <HAL_UART_Transmit>
 80007fa:	e7f7      	b.n	80007ec <main+0x13c>
 80007fc:	58020c00 	.word	0x58020c00
 8000800:	240002a4 	.word	0x240002a4
 8000804:	58021000 	.word	0x58021000
 8000808:	240002a8 	.word	0x240002a8
 800080c:	58020400 	.word	0x58020400
 8000810:	08006e88 	.word	0x08006e88
 8000814:	24000210 	.word	0x24000210

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09c      	sub	sp, #112	; 0x70
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	224c      	movs	r2, #76	; 0x4c
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f006 faf6 	bl	8006e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2220      	movs	r2, #32
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f006 faf0 	bl	8006e18 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000838:	4b30      	ldr	r3, [pc, #192]	; (80008fc <SystemClock_Config+0xe4>)
 800083a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800083e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000842:	2002      	movs	r0, #2
 8000844:	f001 f9f6 	bl	8001c34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000848:	2300      	movs	r3, #0
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <SystemClock_Config+0xe8>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a2b      	ldr	r2, [pc, #172]	; (8000900 <SystemClock_Config+0xe8>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b29      	ldr	r3, [pc, #164]	; (8000900 <SystemClock_Config+0xe8>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000864:	bf00      	nop
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <SystemClock_Config+0xe8>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800086e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000872:	d1f8      	bne.n	8000866 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000878:	2301      	movs	r3, #1
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800087c:	2340      	movs	r3, #64	; 0x40
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 20;
 8000888:	2314      	movs	r3, #20
 800088a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 175;
 800088c:	23af      	movs	r3, #175	; 0xaf
 800088e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000894:	2302      	movs	r3, #2
 8000896:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000898:	2302      	movs	r3, #2
 800089a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800089c:	2304      	movs	r3, #4
 800089e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 f9fb 	bl	8001ca8 <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80008b8:	f000 fb80 	bl	8000fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	233f      	movs	r3, #63	; 0x3f
 80008be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2303      	movs	r3, #3
 80008c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008d0:	2340      	movs	r3, #64	; 0x40
 80008d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2106      	movs	r1, #6
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fe12 	bl	800250c <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80008ee:	f000 fb65 	bl	8000fbc <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3770      	adds	r7, #112	; 0x70
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	58024400 	.word	0x58024400
 8000900:	58024800 	.word	0x58024800

08000904 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0b0      	sub	sp, #192	; 0xc0
 8000908:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800090a:	463b      	mov	r3, r7
 800090c:	22c0      	movs	r2, #192	; 0xc0
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f006 fa81 	bl	8006e18 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 8000916:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800091a:	f04f 0300 	mov.w	r3, #0
 800091e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000922:	2320      	movs	r3, #32
 8000924:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000926:	2381      	movs	r3, #129	; 0x81
 8000928:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4618      	mov	r0, r3
 800094c:	f002 f96a 	bl	8002c24 <HAL_RCCEx_PeriphCLKConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000956:	f000 fb31 	bl	8000fbc <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	37c0      	adds	r7, #192	; 0xc0
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_SPI1_Init+0xa8>)
 800096a:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <MX_SPI1_Init+0xac>)
 800096c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096e:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <MX_SPI1_Init+0xa8>)
 8000970:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000974:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_SPI1_Init+0xa8>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <MX_SPI1_Init+0xa8>)
 800097e:	2207      	movs	r2, #7
 8000980:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_SPI1_Init+0xa8>)
 8000984:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000988:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <MX_SPI1_Init+0xa8>)
 800098c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000990:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_SPI1_Init+0xa8>)
 8000994:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000998:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_SPI1_Init+0xa8>)
 800099c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80009a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009c8:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_SPI1_Init+0xa8>)
 80009fa:	f003 fef3 	bl	80047e4 <HAL_SPI_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8000a04:	f000 fada 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2400002c 	.word	0x2400002c
 8000a10:	40013000 	.word	0x40013000

08000a14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a1a:	4a29      	ldr	r2, [pc, #164]	; (8000ac0 <MX_SPI2_Init+0xac>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a1e:	4b27      	ldr	r3, [pc, #156]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a20:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a2e:	2207      	movs	r2, #7
 8000a30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a32:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a38:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a48:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000a50:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_SPI2_Init+0xa8>)
 8000aa8:	f003 fe9c 	bl	80047e4 <HAL_SPI_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000ab2:	f000 fa83 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	240000b4 	.word	0x240000b4
 8000ac0:	40003800 	.word	0x40003800

08000ac4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ac8:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000aca:	4a29      	ldr	r2, [pc, #164]	; (8000b70 <MX_SPI3_Init+0xac>)
 8000acc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ace:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000ad0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ad4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000ade:	2207      	movs	r2, #7
 8000ae0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ae2:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000ae4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ae8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000aea:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000aec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000af0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000af4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000af8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000afc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b00:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b28:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_SPI3_Init+0xa8>)
 8000b5a:	f003 fe43 	bl	80047e4 <HAL_SPI_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
 8000b64:	f000 fa2a 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2400013c 	.word	0x2400013c
 8000b70:	40003c00 	.word	0x40003c00

08000b74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	; 0x38
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
 8000ba2:	615a      	str	r2, [r3, #20]
 8000ba4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <MX_TIM3_Init+0xe4>)
 8000ba8:	4a2c      	ldr	r2, [pc, #176]	; (8000c5c <MX_TIM3_Init+0xe8>)
 8000baa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bac:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <MX_TIM3_Init+0xe4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <MX_TIM3_Init+0xe4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15;
 8000bb8:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <MX_TIM3_Init+0xe4>)
 8000bba:	220f      	movs	r2, #15
 8000bbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <MX_TIM3_Init+0xe4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bc4:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <MX_TIM3_Init+0xe4>)
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bca:	4823      	ldr	r0, [pc, #140]	; (8000c58 <MX_TIM3_Init+0xe4>)
 8000bcc:	f003 ff49 	bl	8004a62 <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bd6:	f000 f9f1 	bl	8000fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be4:	4619      	mov	r1, r3
 8000be6:	481c      	ldr	r0, [pc, #112]	; (8000c58 <MX_TIM3_Init+0xe4>)
 8000be8:	f004 f908 	bl	8004dfc <HAL_TIM_ConfigClockSource>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000bf2:	f000 f9e3 	bl	8000fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bf6:	4818      	ldr	r0, [pc, #96]	; (8000c58 <MX_TIM3_Init+0xe4>)
 8000bf8:	f003 ff8a 	bl	8004b10 <HAL_TIM_PWM_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c02:	f000 f9db 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <MX_TIM3_Init+0xe4>)
 8000c16:	f004 fe03 	bl	8005820 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c20:	f000 f9cc 	bl	8000fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c24:	2360      	movs	r3, #96	; 0x60
 8000c26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	2204      	movs	r2, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4807      	ldr	r0, [pc, #28]	; (8000c58 <MX_TIM3_Init+0xe4>)
 8000c3c:	f003 ffca 	bl	8004bd4 <HAL_TIM_PWM_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c46:	f000 f9b9 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c4a:	4803      	ldr	r0, [pc, #12]	; (8000c58 <MX_TIM3_Init+0xe4>)
 8000c4c:	f000 fb08 	bl	8001260 <HAL_TIM_MspPostInit>

}
 8000c50:	bf00      	nop
 8000c52:	3738      	adds	r7, #56	; 0x38
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	240001c4 	.word	0x240001c4
 8000c5c:	40000400 	.word	0x40000400

08000c60 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000c66:	4a23      	ldr	r2, [pc, #140]	; (8000cf4 <MX_UART4_Init+0x94>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000c6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ca8:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000caa:	f004 fe47 	bl	800593c <HAL_UART_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000cb4:	f000 f982 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb8:	2100      	movs	r1, #0
 8000cba:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000cbc:	f005 ffe1 	bl	8006c82 <HAL_UARTEx_SetTxFifoThreshold>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000cc6:	f000 f979 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000cce:	f006 f816 	bl	8006cfe <HAL_UARTEx_SetRxFifoThreshold>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000cd8:	f000 f970 	bl	8000fbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <MX_UART4_Init+0x90>)
 8000cde:	f005 ff97 	bl	8006c10 <HAL_UARTEx_DisableFifoMode>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ce8:	f000 f968 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	24000210 	.word	0x24000210
 8000cf4:	40004c00 	.word	0x40004c00

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0e:	4b5a      	ldr	r3, [pc, #360]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d14:	4a58      	ldr	r2, [pc, #352]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d1e:	4b56      	ldr	r3, [pc, #344]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2c:	4b52      	ldr	r3, [pc, #328]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d32:	4a51      	ldr	r2, [pc, #324]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d3c:	4b4e      	ldr	r3, [pc, #312]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b4b      	ldr	r3, [pc, #300]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d50:	4a49      	ldr	r2, [pc, #292]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d5a:	4b47      	ldr	r3, [pc, #284]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b43      	ldr	r3, [pc, #268]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d6e:	4a42      	ldr	r2, [pc, #264]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d78:	4b3f      	ldr	r3, [pc, #252]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d86:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d8c:	4a3a      	ldr	r2, [pc, #232]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <MX_GPIO_Init+0x180>)
 8000d98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2108      	movs	r1, #8
 8000da8:	4834      	ldr	r0, [pc, #208]	; (8000e7c <MX_GPIO_Init+0x184>)
 8000daa:	f000 ff29 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2101      	movs	r1, #1
 8000db2:	4833      	ldr	r0, [pc, #204]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000db4:	f000 ff24 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbe:	4831      	ldr	r0, [pc, #196]	; (8000e84 <MX_GPIO_Init+0x18c>)
 8000dc0:	f000 ff1e 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	482f      	ldr	r0, [pc, #188]	; (8000e88 <MX_GPIO_Init+0x190>)
 8000dca:	f000 ff19 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	4826      	ldr	r0, [pc, #152]	; (8000e7c <MX_GPIO_Init+0x184>)
 8000de2:	f000 fd45 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000de6:	2308      	movs	r3, #8
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481f      	ldr	r0, [pc, #124]	; (8000e7c <MX_GPIO_Init+0x184>)
 8000dfe:	f000 fd37 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e02:	2301      	movs	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4819      	ldr	r0, [pc, #100]	; (8000e80 <MX_GPIO_Init+0x188>)
 8000e1a:	f000 fd29 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4813      	ldr	r0, [pc, #76]	; (8000e84 <MX_GPIO_Init+0x18c>)
 8000e38:	f000 fd1a 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480e      	ldr	r0, [pc, #56]	; (8000e88 <MX_GPIO_Init+0x190>)
 8000e50:	f000 fd0e 	bl	8001870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e54:	2308      	movs	r3, #8
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e60:	2302      	movs	r3, #2
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4807      	ldr	r0, [pc, #28]	; (8000e88 <MX_GPIO_Init+0x190>)
 8000e6c:	f000 fd00 	bl	8001870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	58021000 	.word	0x58021000
 8000e80:	58020400 	.word	0x58020400
 8000e84:	58020000 	.word	0x58020000
 8000e88:	58020c00 	.word	0x58020c00

08000e8c <SPI_rxtx>:

}


void SPI_rxtx(uint8_t* Txdata,uint8_t* Rxdata,uint16_t Size)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	4613      	mov	r3, r2
 8000e98:	80fb      	strh	r3, [r7, #6]
	GPIOE->BSRR |= CS1_LOW;
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <SPI_rxtx+0xec>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	4a36      	ldr	r2, [pc, #216]	; (8000f78 <SPI_rxtx+0xec>)
 8000ea0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ea4:	6193      	str	r3, [r2, #24]

//		LL_SPI_Enable(SPI1);
//		LL_SPI_Enable(SPI2);
//		LL_SPI_Enable(SPI3);
		LL_SPI_StartMasterTransfer(SPI1);
 8000ea6:	4835      	ldr	r0, [pc, #212]	; (8000f7c <SPI_rxtx+0xf0>)
 8000ea8:	f7ff fbae 	bl	8000608 <LL_SPI_StartMasterTransfer>
		LL_SPI_StartMasterTransfer(SPI2);
 8000eac:	4834      	ldr	r0, [pc, #208]	; (8000f80 <SPI_rxtx+0xf4>)
 8000eae:	f7ff fbab 	bl	8000608 <LL_SPI_StartMasterTransfer>
		LL_SPI_StartMasterTransfer(SPI3);
 8000eb2:	4834      	ldr	r0, [pc, #208]	; (8000f84 <SPI_rxtx+0xf8>)
 8000eb4:	f7ff fba8 	bl	8000608 <LL_SPI_StartMasterTransfer>
		for(int i=0;i<Size;i++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e045      	b.n	8000f4a <SPI_rxtx+0xbe>
		{
			while(!(LL_SPI_IsActiveFlag_TXP(SPI1) | LL_SPI_IsActiveFlag_TXP(SPI2) | LL_SPI_IsActiveFlag_TXP(SPI3)));
 8000ebe:	bf00      	nop
 8000ec0:	482e      	ldr	r0, [pc, #184]	; (8000f7c <SPI_rxtx+0xf0>)
 8000ec2:	f7ff fbc4 	bl	800064e <LL_SPI_IsActiveFlag_TXP>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	482d      	ldr	r0, [pc, #180]	; (8000f80 <SPI_rxtx+0xf4>)
 8000eca:	f7ff fbc0 	bl	800064e <LL_SPI_IsActiveFlag_TXP>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	431c      	orrs	r4, r3
 8000ed2:	482c      	ldr	r0, [pc, #176]	; (8000f84 <SPI_rxtx+0xf8>)
 8000ed4:	f7ff fbbb 	bl	800064e <LL_SPI_IsActiveFlag_TXP>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4323      	orrs	r3, r4
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0ef      	beq.n	8000ec0 <SPI_rxtx+0x34>
//			*((__IO uint8_t*)&SPI1->TXDR) = (uint8_t*)Txdata++;
//			*((__IO uint8_t*)&SPI1->TXDR) = *((__IO uint8_t*)&SPI2->TXDR) = *((__IO uint8_t*)&SPI3->TXDR) = (uint8_t*)0x00;
			*((__IO uint8_t*)&SPI1->TXDR) = (uint8_t*)0x00;
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <SPI_rxtx+0xfc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
			*((__IO uint8_t*)&SPI2->TXDR) = (uint8_t*)0x11;
 8000ee6:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <SPI_rxtx+0x100>)
 8000ee8:	2211      	movs	r2, #17
 8000eea:	701a      	strb	r2, [r3, #0]
			*((__IO uint8_t*)&SPI3->TXDR) = (uint8_t*)0x22;
 8000eec:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <SPI_rxtx+0x104>)
 8000eee:	2222      	movs	r2, #34	; 0x22
 8000ef0:	701a      	strb	r2, [r3, #0]
			while(!(LL_SPI_IsActiveFlag_RXP(SPI1) | LL_SPI_IsActiveFlag_RXP(SPI2) | LL_SPI_IsActiveFlag_RXP(SPI3)));
 8000ef2:	bf00      	nop
 8000ef4:	4821      	ldr	r0, [pc, #132]	; (8000f7c <SPI_rxtx+0xf0>)
 8000ef6:	f7ff fb97 	bl	8000628 <LL_SPI_IsActiveFlag_RXP>
 8000efa:	4604      	mov	r4, r0
 8000efc:	4820      	ldr	r0, [pc, #128]	; (8000f80 <SPI_rxtx+0xf4>)
 8000efe:	f7ff fb93 	bl	8000628 <LL_SPI_IsActiveFlag_RXP>
 8000f02:	4603      	mov	r3, r0
 8000f04:	431c      	orrs	r4, r3
 8000f06:	481f      	ldr	r0, [pc, #124]	; (8000f84 <SPI_rxtx+0xf8>)
 8000f08:	f7ff fb8e 	bl	8000628 <LL_SPI_IsActiveFlag_RXP>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0ef      	beq.n	8000ef4 <SPI_rxtx+0x68>
			*Rxdata++ = LL_SPI_ReceiveData8(SPI1);
 8000f14:	68bc      	ldr	r4, [r7, #8]
 8000f16:	1c63      	adds	r3, r4, #1
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	4818      	ldr	r0, [pc, #96]	; (8000f7c <SPI_rxtx+0xf0>)
 8000f1c:	f7ff fbba 	bl	8000694 <LL_SPI_ReceiveData8>
 8000f20:	4603      	mov	r3, r0
 8000f22:	7023      	strb	r3, [r4, #0]
			*Rxdata++ = LL_SPI_ReceiveData8(SPI2);
 8000f24:	68bc      	ldr	r4, [r7, #8]
 8000f26:	1c63      	adds	r3, r4, #1
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4815      	ldr	r0, [pc, #84]	; (8000f80 <SPI_rxtx+0xf4>)
 8000f2c:	f7ff fbb2 	bl	8000694 <LL_SPI_ReceiveData8>
 8000f30:	4603      	mov	r3, r0
 8000f32:	7023      	strb	r3, [r4, #0]
			*Rxdata++ = LL_SPI_ReceiveData8(SPI3);
 8000f34:	68bc      	ldr	r4, [r7, #8]
 8000f36:	1c63      	adds	r3, r4, #1
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4812      	ldr	r0, [pc, #72]	; (8000f84 <SPI_rxtx+0xf8>)
 8000f3c:	f7ff fbaa 	bl	8000694 <LL_SPI_ReceiveData8>
 8000f40:	4603      	mov	r3, r0
 8000f42:	7023      	strb	r3, [r4, #0]
		for(int i=0;i<Size;i++)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3301      	adds	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	dbb5      	blt.n	8000ebe <SPI_rxtx+0x32>

		}

		LL_SPI_ClearFlag_EOT(SPI1);
 8000f52:	480a      	ldr	r0, [pc, #40]	; (8000f7c <SPI_rxtx+0xf0>)
 8000f54:	f7ff fb8e 	bl	8000674 <LL_SPI_ClearFlag_EOT>
		LL_SPI_ClearFlag_EOT(SPI2);
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <SPI_rxtx+0xf4>)
 8000f5a:	f7ff fb8b 	bl	8000674 <LL_SPI_ClearFlag_EOT>
		LL_SPI_ClearFlag_EOT(SPI3);
 8000f5e:	4809      	ldr	r0, [pc, #36]	; (8000f84 <SPI_rxtx+0xf8>)
 8000f60:	f7ff fb88 	bl	8000674 <LL_SPI_ClearFlag_EOT>
	GPIOE->BSRR |= CS1_HIGH;
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SPI_rxtx+0xec>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <SPI_rxtx+0xec>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	6193      	str	r3, [r2, #24]
//	HAL_Delay(1);
}
 8000f70:	bf00      	nop
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	58021000 	.word	0x58021000
 8000f7c:	40013000 	.word	0x40013000
 8000f80:	40003800 	.word	0x40003800
 8000f84:	40003c00 	.word	0x40003c00
 8000f88:	40013020 	.word	0x40013020
 8000f8c:	40003820 	.word	0x40003820
 8000f90:	40003c20 	.word	0x40003c20

08000f94 <SPI_ll_init>:


void SPI_ll_init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	LL_SPI_Enable(SPI1);
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <SPI_ll_init+0x1c>)
 8000f9a:	f7ff fb25 	bl	80005e8 <LL_SPI_Enable>
	LL_SPI_Enable(SPI2);
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <SPI_ll_init+0x20>)
 8000fa0:	f7ff fb22 	bl	80005e8 <LL_SPI_Enable>
	LL_SPI_Enable(SPI3);
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <SPI_ll_init+0x24>)
 8000fa6:	f7ff fb1f 	bl	80005e8 <LL_SPI_Enable>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40013000 	.word	0x40013000
 8000fb4:	40003800 	.word	0x40003800
 8000fb8:	40003c00 	.word	0x40003c00

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b08f      	sub	sp, #60	; 0x3c
 8000fc0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc2:	b672      	cpsid	i
}
 8000fc4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <Error_Handler+0x36>

08000ff4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_MspInit+0x30>)
 8000ffc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_MspInit+0x30>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_MspInit+0x30>)
 800100c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	58024400 	.word	0x58024400

08001028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	; 0x40
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a6e      	ldr	r2, [pc, #440]	; (8001200 <HAL_SPI_MspInit+0x1d8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d12e      	bne.n	80010a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800104a:	4b6e      	ldr	r3, [pc, #440]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 800104c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001050:	4a6c      	ldr	r2, [pc, #432]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 8001052:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001056:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800105a:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 800105c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
 8001066:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001068:	4b66      	ldr	r3, [pc, #408]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 800106a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800106e:	4a65      	ldr	r2, [pc, #404]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001078:	4b62      	ldr	r3, [pc, #392]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 800107a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001086:	23e0      	movs	r3, #224	; 0xe0
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001096:	2305      	movs	r3, #5
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109e:	4619      	mov	r1, r3
 80010a0:	4859      	ldr	r0, [pc, #356]	; (8001208 <HAL_SPI_MspInit+0x1e0>)
 80010a2:	f000 fbe5 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010a6:	e0a6      	b.n	80011f6 <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a57      	ldr	r2, [pc, #348]	; (800120c <HAL_SPI_MspInit+0x1e4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d14e      	bne.n	8001150 <HAL_SPI_MspInit+0x128>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010b2:	4b54      	ldr	r3, [pc, #336]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 80010b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010b8:	4a52      	ldr	r2, [pc, #328]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 80010ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010be:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010c2:	4b50      	ldr	r3, [pc, #320]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 80010c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010cc:	623b      	str	r3, [r7, #32]
 80010ce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 80010d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010d6:	4a4b      	ldr	r2, [pc, #300]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010e0:	4b48      	ldr	r3, [pc, #288]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 80010e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b45      	ldr	r3, [pc, #276]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 80010f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010f4:	4a43      	ldr	r2, [pc, #268]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010fe:	4b41      	ldr	r3, [pc, #260]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 8001100:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800110c:	2302      	movs	r3, #2
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800111c:	2305      	movs	r3, #5
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001124:	4619      	mov	r1, r3
 8001126:	483a      	ldr	r0, [pc, #232]	; (8001210 <HAL_SPI_MspInit+0x1e8>)
 8001128:	f000 fba2 	bl	8001870 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 800112c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800113e:	2305      	movs	r3, #5
 8001140:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001146:	4619      	mov	r1, r3
 8001148:	4832      	ldr	r0, [pc, #200]	; (8001214 <HAL_SPI_MspInit+0x1ec>)
 800114a:	f000 fb91 	bl	8001870 <HAL_GPIO_Init>
}
 800114e:	e052      	b.n	80011f6 <HAL_SPI_MspInit+0x1ce>
  else if(hspi->Instance==SPI3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a30      	ldr	r2, [pc, #192]	; (8001218 <HAL_SPI_MspInit+0x1f0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d14d      	bne.n	80011f6 <HAL_SPI_MspInit+0x1ce>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 800115c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001160:	4a28      	ldr	r2, [pc, #160]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 8001162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001166:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 800116c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 800117a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800117e:	4a21      	ldr	r2, [pc, #132]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 800118a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 8001198:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 80011a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011b4:	2304      	movs	r3, #4
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80011c4:	2307      	movs	r3, #7
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011cc:	4619      	mov	r1, r3
 80011ce:	4811      	ldr	r0, [pc, #68]	; (8001214 <HAL_SPI_MspInit+0x1ec>)
 80011d0:	f000 fb4e 	bl	8001870 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011e6:	2306      	movs	r3, #6
 80011e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ee:	4619      	mov	r1, r3
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <HAL_SPI_MspInit+0x1e8>)
 80011f2:	f000 fb3d 	bl	8001870 <HAL_GPIO_Init>
}
 80011f6:	bf00      	nop
 80011f8:	3740      	adds	r7, #64	; 0x40
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40013000 	.word	0x40013000
 8001204:	58024400 	.word	0x58024400
 8001208:	58020000 	.word	0x58020000
 800120c:	40003800 	.word	0x40003800
 8001210:	58020800 	.word	0x58020800
 8001214:	58020400 	.word	0x58020400
 8001218:	40003c00 	.word	0x40003c00

0800121c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_TIM_Base_MspInit+0x3c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_TIM_Base_MspInit+0x40>)
 8001230:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001234:	4a09      	ldr	r2, [pc, #36]	; (800125c <HAL_TIM_Base_MspInit+0x40>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <HAL_TIM_Base_MspInit+0x40>)
 8001240:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40000400 	.word	0x40000400
 800125c:	58024400 	.word	0x58024400

08001260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <HAL_TIM_MspPostInit+0x68>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d11e      	bne.n	80012c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_TIM_MspPostInit+0x6c>)
 8001284:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001288:	4a10      	ldr	r2, [pc, #64]	; (80012cc <HAL_TIM_MspPostInit+0x6c>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <HAL_TIM_MspPostInit+0x6c>)
 8001294:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <HAL_TIM_MspPostInit+0x70>)
 80012bc:	f000 fad8 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012c0:	bf00      	nop
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40000400 	.word	0x40000400
 80012cc:	58024400 	.word	0x58024400
 80012d0:	58020800 	.word	0x58020800

080012d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0ba      	sub	sp, #232	; 0xe8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	22c0      	movs	r2, #192	; 0xc0
 80012f2:	2100      	movs	r1, #0
 80012f4:	4618      	mov	r0, r3
 80012f6:	f005 fd8f 	bl	8006e18 <memset>
  if(huart->Instance==UART4)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a26      	ldr	r2, [pc, #152]	; (8001398 <HAL_UART_MspInit+0xc4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d145      	bne.n	8001390 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001304:	f04f 0202 	mov.w	r2, #2
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001310:	2300      	movs	r3, #0
 8001312:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4618      	mov	r0, r3
 800131c:	f001 fc82 	bl	8002c24 <HAL_RCCEx_PeriphCLKConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001326:	f7ff fe49 	bl	8000fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <HAL_UART_MspInit+0xc8>)
 800132c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001330:	4a1a      	ldr	r2, [pc, #104]	; (800139c <HAL_UART_MspInit+0xc8>)
 8001332:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001336:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_UART_MspInit+0xc8>)
 800133c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_UART_MspInit+0xc8>)
 800134a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800134e:	4a13      	ldr	r2, [pc, #76]	; (800139c <HAL_UART_MspInit+0xc8>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_UART_MspInit+0xc8>)
 800135a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001366:	2303      	movs	r3, #3
 8001368:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800137e:	2308      	movs	r3, #8
 8001380:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001388:	4619      	mov	r1, r3
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <HAL_UART_MspInit+0xcc>)
 800138c:	f000 fa70 	bl	8001870 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	37e8      	adds	r7, #232	; 0xe8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40004c00 	.word	0x40004c00
 800139c:	58024400 	.word	0x58024400
 80013a0:	58020000 	.word	0x58020000

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f0:	f000 f916 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013fc:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <SystemInit+0xd0>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001402:	4a31      	ldr	r2, [pc, #196]	; (80014c8 <SystemInit+0xd0>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800140c:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <SystemInit+0xd4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	2b02      	cmp	r3, #2
 8001416:	d807      	bhi.n	8001428 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001418:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <SystemInit+0xd4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 030f 	bic.w	r3, r3, #15
 8001420:	4a2a      	ldr	r2, [pc, #168]	; (80014cc <SystemInit+0xd4>)
 8001422:	f043 0303 	orr.w	r3, r3, #3
 8001426:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001428:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <SystemInit+0xd8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <SystemInit+0xd8>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001434:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <SystemInit+0xd8>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800143a:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <SystemInit+0xd8>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	4924      	ldr	r1, [pc, #144]	; (80014d0 <SystemInit+0xd8>)
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <SystemInit+0xdc>)
 8001442:	4013      	ands	r3, r2
 8001444:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <SystemInit+0xd4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <SystemInit+0xd4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 030f 	bic.w	r3, r3, #15
 800145a:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <SystemInit+0xd4>)
 800145c:	f043 0303 	orr.w	r3, r3, #3
 8001460:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <SystemInit+0xd8>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <SystemInit+0xd8>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <SystemInit+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <SystemInit+0xd8>)
 8001476:	4a18      	ldr	r2, [pc, #96]	; (80014d8 <SystemInit+0xe0>)
 8001478:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <SystemInit+0xd8>)
 800147c:	4a17      	ldr	r2, [pc, #92]	; (80014dc <SystemInit+0xe4>)
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <SystemInit+0xd8>)
 8001482:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <SystemInit+0xe8>)
 8001484:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <SystemInit+0xd8>)
 8001488:	2200      	movs	r2, #0
 800148a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <SystemInit+0xd8>)
 800148e:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <SystemInit+0xe8>)
 8001490:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <SystemInit+0xd8>)
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <SystemInit+0xd8>)
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <SystemInit+0xe8>)
 800149c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <SystemInit+0xd8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <SystemInit+0xd8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a09      	ldr	r2, [pc, #36]	; (80014d0 <SystemInit+0xd8>)
 80014aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <SystemInit+0xd8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <SystemInit+0xec>)
 80014b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014bc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00
 80014cc:	52002000 	.word	0x52002000
 80014d0:	58024400 	.word	0x58024400
 80014d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80014d8:	02020200 	.word	0x02020200
 80014dc:	01ff0000 	.word	0x01ff0000
 80014e0:	01010280 	.word	0x01010280
 80014e4:	52004000 	.word	0x52004000

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014ec:	f7ff ff84 	bl	80013f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	; (8001528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	; (8001534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f005 fc87 	bl	8006e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff f8c9 	bl	80006b0 <main>
  bx  lr
 800151e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001524:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001528:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800152c:	08006ee4 	.word	0x08006ee4
  ldr r2, =_sbss
 8001530:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001534:	240002b8 	.word	0x240002b8

08001538 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC_IRQHandler>
	...

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001542:	2003      	movs	r0, #3
 8001544:	f000 f962 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001548:	f001 f996 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 800154c:	4602      	mov	r2, r0
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_Init+0x68>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	0a1b      	lsrs	r3, r3, #8
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	4913      	ldr	r1, [pc, #76]	; (80015a8 <HAL_Init+0x6c>)
 800155a:	5ccb      	ldrb	r3, [r1, r3]
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_Init+0x68>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_Init+0x6c>)
 8001570:	5cd3      	ldrb	r3, [r2, r3]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	fa22 f303 	lsr.w	r3, r2, r3
 800157c:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_Init+0x70>)
 800157e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_Init+0x74>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001586:	200f      	movs	r0, #15
 8001588:	f000 f814 	bl	80015b4 <HAL_InitTick>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e002      	b.n	800159c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001596:	f7ff fd2d 	bl	8000ff4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	58024400 	.word	0x58024400
 80015a8:	08006e9c 	.word	0x08006e9c
 80015ac:	24000004 	.word	0x24000004
 80015b0:	24000000 	.word	0x24000000

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_InitTick+0x60>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e021      	b.n	800160c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_InitTick+0x64>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_InitTick+0x60>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f939 	bl	8001856 <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d80a      	bhi.n	800160a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015fc:	f000 f911 	bl	8001822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <HAL_InitTick+0x68>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	2400000c 	.word	0x2400000c
 8001618:	24000000 	.word	0x24000000
 800161c:	24000008 	.word	0x24000008

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	2400000c 	.word	0x2400000c
 8001644:	240002b4 	.word	0x240002b4

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	240002b4 	.word	0x240002b4

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2400000c 	.word	0x2400000c

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <__NVIC_SetPriorityGrouping+0x40>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x40>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00
 80016ec:	05fa0000 	.word	0x05fa0000

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <__NVIC_SetPriority+0x50>)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
         );
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017ec:	f7ff ff8e 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff47 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff5e 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff90 	bl	8001760 <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5f 	bl	800170c <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffb2 	bl	80017c8 <SysTick_Config>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800187e:	4b89      	ldr	r3, [pc, #548]	; (8001aa4 <HAL_GPIO_Init+0x234>)
 8001880:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001882:	e194      	b.n	8001bae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8186 	beq.w	8001ba8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d005      	beq.n	80018b4 <HAL_GPIO_Init+0x44>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d130      	bne.n	8001916 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ea:	2201      	movs	r2, #1
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	f003 0201 	and.w	r2, r3, #1
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b03      	cmp	r3, #3
 8001920:	d017      	beq.n	8001952 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d123      	bne.n	80019a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	220f      	movs	r2, #15
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	69b9      	ldr	r1, [r7, #24]
 80019a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0203 	and.w	r2, r3, #3
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80e0 	beq.w	8001ba8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_GPIO_Init+0x238>)
 80019ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80019ee:	4a2e      	ldr	r2, [pc, #184]	; (8001aa8 <HAL_GPIO_Init+0x238>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_GPIO_Init+0x238>)
 80019fa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a06:	4a29      	ldr	r2, [pc, #164]	; (8001aac <HAL_GPIO_Init+0x23c>)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <HAL_GPIO_Init+0x240>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d052      	beq.n	8001ad8 <HAL_GPIO_Init+0x268>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <HAL_GPIO_Init+0x244>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d031      	beq.n	8001a9e <HAL_GPIO_Init+0x22e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_GPIO_Init+0x248>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d02b      	beq.n	8001a9a <HAL_GPIO_Init+0x22a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <HAL_GPIO_Init+0x24c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d025      	beq.n	8001a96 <HAL_GPIO_Init+0x226>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <HAL_GPIO_Init+0x250>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d01f      	beq.n	8001a92 <HAL_GPIO_Init+0x222>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <HAL_GPIO_Init+0x254>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d019      	beq.n	8001a8e <HAL_GPIO_Init+0x21e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <HAL_GPIO_Init+0x258>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0x21a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <HAL_GPIO_Init+0x25c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00d      	beq.n	8001a86 <HAL_GPIO_Init+0x216>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <HAL_GPIO_Init+0x260>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_Init+0x212>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <HAL_GPIO_Init+0x264>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_GPIO_Init+0x20e>
 8001a7a:	2309      	movs	r3, #9
 8001a7c:	e02d      	b.n	8001ada <HAL_GPIO_Init+0x26a>
 8001a7e:	230a      	movs	r3, #10
 8001a80:	e02b      	b.n	8001ada <HAL_GPIO_Init+0x26a>
 8001a82:	2308      	movs	r3, #8
 8001a84:	e029      	b.n	8001ada <HAL_GPIO_Init+0x26a>
 8001a86:	2307      	movs	r3, #7
 8001a88:	e027      	b.n	8001ada <HAL_GPIO_Init+0x26a>
 8001a8a:	2306      	movs	r3, #6
 8001a8c:	e025      	b.n	8001ada <HAL_GPIO_Init+0x26a>
 8001a8e:	2305      	movs	r3, #5
 8001a90:	e023      	b.n	8001ada <HAL_GPIO_Init+0x26a>
 8001a92:	2304      	movs	r3, #4
 8001a94:	e021      	b.n	8001ada <HAL_GPIO_Init+0x26a>
 8001a96:	2303      	movs	r3, #3
 8001a98:	e01f      	b.n	8001ada <HAL_GPIO_Init+0x26a>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e01d      	b.n	8001ada <HAL_GPIO_Init+0x26a>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e01b      	b.n	8001ada <HAL_GPIO_Init+0x26a>
 8001aa2:	bf00      	nop
 8001aa4:	58000080 	.word	0x58000080
 8001aa8:	58024400 	.word	0x58024400
 8001aac:	58000400 	.word	0x58000400
 8001ab0:	58020000 	.word	0x58020000
 8001ab4:	58020400 	.word	0x58020400
 8001ab8:	58020800 	.word	0x58020800
 8001abc:	58020c00 	.word	0x58020c00
 8001ac0:	58021000 	.word	0x58021000
 8001ac4:	58021400 	.word	0x58021400
 8001ac8:	58021800 	.word	0x58021800
 8001acc:	58021c00 	.word	0x58021c00
 8001ad0:	58022000 	.word	0x58022000
 8001ad4:	58022400 	.word	0x58022400
 8001ad8:	2300      	movs	r3, #0
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	f002 0203 	and.w	r2, r2, #3
 8001ae0:	0092      	lsls	r2, r2, #2
 8001ae2:	4093      	lsls	r3, r2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aea:	4938      	ldr	r1, [pc, #224]	; (8001bcc <HAL_GPIO_Init+0x35c>)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	3301      	adds	r3, #1
 8001bac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f47f ae63 	bne.w	8001884 <HAL_GPIO_Init+0x14>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	3724      	adds	r7, #36	; 0x24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	58000400 	.word	0x58000400

08001bd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
 8001bec:	e001      	b.n	8001bf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c10:	787b      	ldrb	r3, [r7, #1]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c1c:	e003      	b.n	8001c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c1e:	887b      	ldrh	r3, [r7, #2]
 8001c20:	041a      	lsls	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	619a      	str	r2, [r3, #24]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d00a      	beq.n	8001c5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d001      	beq.n	8001c5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e01f      	b.n	8001c9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e01d      	b.n	8001c9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f023 0207 	bic.w	r2, r3, #7
 8001c66:	490f      	ldr	r1, [pc, #60]	; (8001ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c6e:	f7ff fceb 	bl	8001648 <HAL_GetTick>
 8001c72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c74:	e009      	b.n	8001c8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c76:	f7ff fce7 	bl	8001648 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c84:	d901      	bls.n	8001c8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e007      	b.n	8001c9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c96:	d1ee      	bne.n	8001c76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	58024800 	.word	0x58024800

08001ca8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08c      	sub	sp, #48	; 0x30
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f000 bc1f 	b.w	80024fa <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80b3 	beq.w	8001e30 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cca:	4b95      	ldr	r3, [pc, #596]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cd4:	4b92      	ldr	r3, [pc, #584]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cdc:	2b10      	cmp	r3, #16
 8001cde:	d007      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x48>
 8001ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce2:	2b18      	cmp	r3, #24
 8001ce4:	d112      	bne.n	8001d0c <HAL_RCC_OscConfig+0x64>
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d10d      	bne.n	8001d0c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	4b8b      	ldr	r3, [pc, #556]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 8098 	beq.w	8001e2e <HAL_RCC_OscConfig+0x186>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 8093 	bne.w	8001e2e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e3f6      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d14:	d106      	bne.n	8001d24 <HAL_RCC_OscConfig+0x7c>
 8001d16:	4b82      	ldr	r3, [pc, #520]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a81      	ldr	r2, [pc, #516]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	e058      	b.n	8001dd6 <HAL_RCC_OscConfig+0x12e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d112      	bne.n	8001d52 <HAL_RCC_OscConfig+0xaa>
 8001d2c:	4b7c      	ldr	r3, [pc, #496]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a7b      	ldr	r2, [pc, #492]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b79      	ldr	r3, [pc, #484]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a78      	ldr	r2, [pc, #480]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b76      	ldr	r3, [pc, #472]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a75      	ldr	r2, [pc, #468]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e041      	b.n	8001dd6 <HAL_RCC_OscConfig+0x12e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d5a:	d112      	bne.n	8001d82 <HAL_RCC_OscConfig+0xda>
 8001d5c:	4b70      	ldr	r3, [pc, #448]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a6f      	ldr	r2, [pc, #444]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b6d      	ldr	r3, [pc, #436]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a6c      	ldr	r2, [pc, #432]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b6a      	ldr	r3, [pc, #424]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a69      	ldr	r2, [pc, #420]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	e029      	b.n	8001dd6 <HAL_RCC_OscConfig+0x12e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001d8a:	d112      	bne.n	8001db2 <HAL_RCC_OscConfig+0x10a>
 8001d8c:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a63      	ldr	r2, [pc, #396]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a60      	ldr	r2, [pc, #384]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a5d      	ldr	r2, [pc, #372]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e011      	b.n	8001dd6 <HAL_RCC_OscConfig+0x12e>
 8001db2:	4b5b      	ldr	r3, [pc, #364]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a5a      	ldr	r2, [pc, #360]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b58      	ldr	r3, [pc, #352]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b55      	ldr	r3, [pc, #340]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a54      	ldr	r2, [pc, #336]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001dd0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001dd4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d013      	beq.n	8001e06 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff fc33 	bl	8001648 <HAL_GetTick>
 8001de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de6:	f7ff fc2f 	bl	8001648 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e380      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001df8:	4b49      	ldr	r3, [pc, #292]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x13e>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff fc1f 	bl	8001648 <HAL_GetTick>
 8001e0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0e:	f7ff fc1b 	bl	8001648 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b64      	cmp	r3, #100	; 0x64
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e36c      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e20:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f0      	bne.n	8001e0e <HAL_RCC_OscConfig+0x166>
 8001e2c:	e000      	b.n	8001e30 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 808c 	beq.w	8001f56 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e46:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <HAL_RCC_OscConfig+0x1bc>
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	2b18      	cmp	r3, #24
 8001e58:	d137      	bne.n	8001eca <HAL_RCC_OscConfig+0x222>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d132      	bne.n	8001eca <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e64:	4b2e      	ldr	r3, [pc, #184]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_OscConfig+0x1d4>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e33e      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e7c:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f023 0219 	bic.w	r2, r3, #25
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4925      	ldr	r1, [pc, #148]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fbdb 	bl	8001648 <HAL_GetTick>
 8001e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e96:	f7ff fbd7 	bl	8001648 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e328      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	4917      	ldr	r1, [pc, #92]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec8:	e045      	b.n	8001f56 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d028      	beq.n	8001f24 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0219 	bic.w	r2, r3, #25
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4910      	ldr	r1, [pc, #64]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fbb0 	bl	8001648 <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eec:	f7ff fbac 	bl	8001648 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e2fd      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	061b      	lsls	r3, r3, #24
 8001f18:	4901      	ldr	r1, [pc, #4]	; (8001f20 <HAL_RCC_OscConfig+0x278>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
 8001f1e:	e01a      	b.n	8001f56 <HAL_RCC_OscConfig+0x2ae>
 8001f20:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f24:	4b97      	ldr	r3, [pc, #604]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a96      	ldr	r2, [pc, #600]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff fb8a 	bl	8001648 <HAL_GetTick>
 8001f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f38:	f7ff fb86 	bl	8001648 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e2d7      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f4a:	4b8e      	ldr	r3, [pc, #568]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d06a      	beq.n	8002038 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f62:	4b88      	ldr	r3, [pc, #544]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f6c:	4b85      	ldr	r3, [pc, #532]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d007      	beq.n	8001f88 <HAL_RCC_OscConfig+0x2e0>
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b18      	cmp	r3, #24
 8001f7c:	d11b      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x30e>
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d116      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f88:	4b7e      	ldr	r3, [pc, #504]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x2f8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b80      	cmp	r3, #128	; 0x80
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e2ac      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fa0:	4b78      	ldr	r3, [pc, #480]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	061b      	lsls	r3, r3, #24
 8001fae:	4975      	ldr	r1, [pc, #468]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fb4:	e040      	b.n	8002038 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d023      	beq.n	8002006 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001fbe:	4b71      	ldr	r3, [pc, #452]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a70      	ldr	r2, [pc, #448]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8001fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7ff fb3d 	bl	8001648 <HAL_GetTick>
 8001fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fd2:	f7ff fb39 	bl	8001648 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e28a      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fe4:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ff0:	4b64      	ldr	r3, [pc, #400]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	061b      	lsls	r3, r3, #24
 8001ffe:	4961      	ldr	r1, [pc, #388]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8002000:	4313      	orrs	r3, r2
 8002002:	60cb      	str	r3, [r1, #12]
 8002004:	e018      	b.n	8002038 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002006:	4b5f      	ldr	r3, [pc, #380]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a5e      	ldr	r2, [pc, #376]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 800200c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff fb19 	bl	8001648 <HAL_GetTick>
 8002016:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800201a:	f7ff fb15 	bl	8001648 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e266      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800202c:	4b55      	ldr	r3, [pc, #340]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d036      	beq.n	80020b2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d019      	beq.n	8002080 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204c:	4b4d      	ldr	r3, [pc, #308]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 800204e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002050:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002058:	f7ff faf6 	bl	8001648 <HAL_GetTick>
 800205c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002060:	f7ff faf2 	bl	8001648 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e243      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002072:	4b44      	ldr	r3, [pc, #272]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8002074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x3b8>
 800207e:	e018      	b.n	80020b2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002080:	4b40      	ldr	r3, [pc, #256]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8002082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002084:	4a3f      	ldr	r2, [pc, #252]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208c:	f7ff fadc 	bl	8001648 <HAL_GetTick>
 8002090:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002094:	f7ff fad8 	bl	8001648 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e229      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020a6:	4b37      	ldr	r3, [pc, #220]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 80020a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d036      	beq.n	800212c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d019      	beq.n	80020fa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020c6:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2e      	ldr	r2, [pc, #184]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 80020cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020d2:	f7ff fab9 	bl	8001648 <HAL_GetTick>
 80020d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020da:	f7ff fab5 	bl	8001648 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e206      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020ec:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x432>
 80020f8:	e018      	b.n	800212c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a21      	ldr	r2, [pc, #132]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8002100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002104:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002106:	f7ff fa9f 	bl	8001648 <HAL_GetTick>
 800210a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210e:	f7ff fa9b 	bl	8001648 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1ec      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f0      	bne.n	800210e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80af 	beq.w	8002298 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <HAL_RCC_OscConfig+0x4e0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <HAL_RCC_OscConfig+0x4e0>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002146:	f7ff fa7f 	bl	8001648 <HAL_GetTick>
 800214a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7ff fa7b 	bl	8001648 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b64      	cmp	r3, #100	; 0x64
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e1cc      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <HAL_RCC_OscConfig+0x4e0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10b      	bne.n	800218c <HAL_RCC_OscConfig+0x4e4>
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a02      	ldr	r2, [pc, #8]	; (8002184 <HAL_RCC_OscConfig+0x4dc>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	e05b      	b.n	800223a <HAL_RCC_OscConfig+0x592>
 8002182:	bf00      	nop
 8002184:	58024400 	.word	0x58024400
 8002188:	58024800 	.word	0x58024800
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d112      	bne.n	80021ba <HAL_RCC_OscConfig+0x512>
 8002194:	4b9d      	ldr	r3, [pc, #628]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a9c      	ldr	r2, [pc, #624]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
 80021a0:	4b9a      	ldr	r3, [pc, #616]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a99      	ldr	r2, [pc, #612]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70
 80021ac:	4b97      	ldr	r3, [pc, #604]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b0:	4a96      	ldr	r2, [pc, #600]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021b2:	f023 0304 	bic.w	r3, r3, #4
 80021b6:	6713      	str	r3, [r2, #112]	; 0x70
 80021b8:	e03f      	b.n	800223a <HAL_RCC_OscConfig+0x592>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d112      	bne.n	80021e8 <HAL_RCC_OscConfig+0x540>
 80021c2:	4b92      	ldr	r3, [pc, #584]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c6:	4a91      	ldr	r2, [pc, #580]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	6713      	str	r3, [r2, #112]	; 0x70
 80021ce:	4b8f      	ldr	r3, [pc, #572]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d2:	4a8e      	ldr	r2, [pc, #568]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021d8:	6713      	str	r3, [r2, #112]	; 0x70
 80021da:	4b8c      	ldr	r3, [pc, #560]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021de:	4a8b      	ldr	r2, [pc, #556]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6713      	str	r3, [r2, #112]	; 0x70
 80021e6:	e028      	b.n	800223a <HAL_RCC_OscConfig+0x592>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b85      	cmp	r3, #133	; 0x85
 80021ee:	d112      	bne.n	8002216 <HAL_RCC_OscConfig+0x56e>
 80021f0:	4b86      	ldr	r3, [pc, #536]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	4a85      	ldr	r2, [pc, #532]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	6713      	str	r3, [r2, #112]	; 0x70
 80021fc:	4b83      	ldr	r3, [pc, #524]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	4a82      	ldr	r2, [pc, #520]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002206:	6713      	str	r3, [r2, #112]	; 0x70
 8002208:	4b80      	ldr	r3, [pc, #512]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	4a7f      	ldr	r2, [pc, #508]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6713      	str	r3, [r2, #112]	; 0x70
 8002214:	e011      	b.n	800223a <HAL_RCC_OscConfig+0x592>
 8002216:	4b7d      	ldr	r3, [pc, #500]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221a:	4a7c      	ldr	r2, [pc, #496]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6713      	str	r3, [r2, #112]	; 0x70
 8002222:	4b7a      	ldr	r3, [pc, #488]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	4a79      	ldr	r2, [pc, #484]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002228:	f023 0304 	bic.w	r3, r3, #4
 800222c:	6713      	str	r3, [r2, #112]	; 0x70
 800222e:	4b77      	ldr	r3, [pc, #476]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a76      	ldr	r2, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d015      	beq.n	800226e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002242:	f7ff fa01 	bl	8001648 <HAL_GetTick>
 8002246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7ff f9fd 	bl	8001648 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e14c      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002260:	4b6a      	ldr	r3, [pc, #424]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0ee      	beq.n	800224a <HAL_RCC_OscConfig+0x5a2>
 800226c:	e014      	b.n	8002298 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226e:	f7ff f9eb 	bl	8001648 <HAL_GetTick>
 8002272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002274:	e00a      	b.n	800228c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7ff f9e7 	bl	8001648 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e136      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800228c:	4b5f      	ldr	r3, [pc, #380]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1ee      	bne.n	8002276 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 812b 	beq.w	80024f8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80022a2:	4b5a      	ldr	r3, [pc, #360]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022aa:	2b18      	cmp	r3, #24
 80022ac:	f000 80bb 	beq.w	8002426 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	f040 8095 	bne.w	80023e4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b54      	ldr	r3, [pc, #336]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a53      	ldr	r2, [pc, #332]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80022c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7ff f9bf 	bl	8001648 <HAL_GetTick>
 80022ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff f9bb 	bl	8001648 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e10c      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022e0:	4b4a      	ldr	r3, [pc, #296]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ec:	4b47      	ldr	r3, [pc, #284]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80022ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022f0:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_OscConfig+0x768>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	430a      	orrs	r2, r1
 8002300:	4942      	ldr	r1, [pc, #264]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002302:	4313      	orrs	r3, r2
 8002304:	628b      	str	r3, [r1, #40]	; 0x28
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	3b01      	subs	r3, #1
 800230c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	3b01      	subs	r3, #1
 8002316:	025b      	lsls	r3, r3, #9
 8002318:	b29b      	uxth	r3, r3
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002320:	3b01      	subs	r3, #1
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	3b01      	subs	r3, #1
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002336:	4935      	ldr	r1, [pc, #212]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002338:	4313      	orrs	r3, r2
 800233a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800233c:	4b33      	ldr	r3, [pc, #204]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	4a32      	ldr	r2, [pc, #200]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800234a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800234c:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCC_OscConfig+0x76c>)
 800234e:	4013      	ands	r3, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002354:	00d2      	lsls	r2, r2, #3
 8002356:	492d      	ldr	r1, [pc, #180]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002358:	4313      	orrs	r3, r2
 800235a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800235c:	4b2b      	ldr	r3, [pc, #172]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	f023 020c 	bic.w	r2, r3, #12
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4928      	ldr	r1, [pc, #160]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800236a:	4313      	orrs	r3, r2
 800236c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800236e:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	f023 0202 	bic.w	r2, r3, #2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4924      	ldr	r1, [pc, #144]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800237c:	4313      	orrs	r3, r2
 800237e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002380:	4b22      	ldr	r3, [pc, #136]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	4a21      	ldr	r2, [pc, #132]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800238c:	4b1f      	ldr	r3, [pc, #124]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	4a1e      	ldr	r2, [pc, #120]	; (800240c <HAL_RCC_OscConfig+0x764>)
 8002392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <HAL_RCC_OscConfig+0x764>)
 800239e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	4a18      	ldr	r2, [pc, #96]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a15      	ldr	r2, [pc, #84]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80023b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7ff f944 	bl	8001648 <HAL_GetTick>
 80023c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7ff f940 	bl	8001648 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e091      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x71c>
 80023e2:	e089      	b.n	80024f8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a08      	ldr	r2, [pc, #32]	; (800240c <HAL_RCC_OscConfig+0x764>)
 80023ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7ff f92a 	bl	8001648 <HAL_GetTick>
 80023f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023f6:	e00f      	b.n	8002418 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f8:	f7ff f926 	bl	8001648 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d908      	bls.n	8002418 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e077      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
 800240a:	bf00      	nop
 800240c:	58024400 	.word	0x58024400
 8002410:	fffffc0c 	.word	0xfffffc0c
 8002414:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002418:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_RCC_OscConfig+0x85c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e9      	bne.n	80023f8 <HAL_RCC_OscConfig+0x750>
 8002424:	e068      	b.n	80024f8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002426:	4b37      	ldr	r3, [pc, #220]	; (8002504 <HAL_RCC_OscConfig+0x85c>)
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800242c:	4b35      	ldr	r3, [pc, #212]	; (8002504 <HAL_RCC_OscConfig+0x85c>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	2b01      	cmp	r3, #1
 8002438:	d031      	beq.n	800249e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0203 	and.w	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002444:	429a      	cmp	r2, r3
 8002446:	d12a      	bne.n	800249e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d122      	bne.n	800249e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d11a      	bne.n	800249e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	0a5b      	lsrs	r3, r3, #9
 800246c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002474:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d111      	bne.n	800249e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d108      	bne.n	800249e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	0e1b      	lsrs	r3, r3, #24
 8002490:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002498:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e02b      	b.n	80024fa <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_RCC_OscConfig+0x85c>)
 80024a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a6:	08db      	lsrs	r3, r3, #3
 80024a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024ac:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d01f      	beq.n	80024f8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_RCC_OscConfig+0x85c>)
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	4a11      	ldr	r2, [pc, #68]	; (8002504 <HAL_RCC_OscConfig+0x85c>)
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024c4:	f7ff f8c0 	bl	8001648 <HAL_GetTick>
 80024c8:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80024ca:	bf00      	nop
 80024cc:	f7ff f8bc 	bl	8001648 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d0f9      	beq.n	80024cc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_RCC_OscConfig+0x85c>)
 80024da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_RCC_OscConfig+0x860>)
 80024de:	4013      	ands	r3, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024e4:	00d2      	lsls	r2, r2, #3
 80024e6:	4907      	ldr	r1, [pc, #28]	; (8002504 <HAL_RCC_OscConfig+0x85c>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCC_OscConfig+0x85c>)
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_RCC_OscConfig+0x85c>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3730      	adds	r7, #48	; 0x30
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	58024400 	.word	0x58024400
 8002508:	ffff0007 	.word	0xffff0007

0800250c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e19c      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b8a      	ldr	r3, [pc, #552]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d910      	bls.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b87      	ldr	r3, [pc, #540]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 020f 	bic.w	r2, r3, #15
 8002536:	4985      	ldr	r1, [pc, #532]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b83      	ldr	r3, [pc, #524]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e184      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d010      	beq.n	800257e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	4b7b      	ldr	r3, [pc, #492]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002568:	429a      	cmp	r2, r3
 800256a:	d908      	bls.n	800257e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800256c:	4b78      	ldr	r3, [pc, #480]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	4975      	ldr	r1, [pc, #468]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800257a:	4313      	orrs	r3, r2
 800257c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d010      	beq.n	80025ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	4b70      	ldr	r3, [pc, #448]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002596:	429a      	cmp	r2, r3
 8002598:	d908      	bls.n	80025ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800259a:	4b6d      	ldr	r3, [pc, #436]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	496a      	ldr	r1, [pc, #424]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d010      	beq.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	4b64      	ldr	r3, [pc, #400]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d908      	bls.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025c8:	4b61      	ldr	r3, [pc, #388]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	495e      	ldr	r1, [pc, #376]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	4b59      	ldr	r3, [pc, #356]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d908      	bls.n	8002608 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025f6:	4b56      	ldr	r3, [pc, #344]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4953      	ldr	r1, [pc, #332]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002604:	4313      	orrs	r3, r2
 8002606:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	4b4d      	ldr	r3, [pc, #308]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	429a      	cmp	r2, r3
 8002622:	d908      	bls.n	8002636 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4b4a      	ldr	r3, [pc, #296]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	f023 020f 	bic.w	r2, r3, #15
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4947      	ldr	r1, [pc, #284]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002632:	4313      	orrs	r3, r2
 8002634:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d055      	beq.n	80026ee <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002642:	4b43      	ldr	r3, [pc, #268]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4940      	ldr	r1, [pc, #256]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002650:	4313      	orrs	r3, r2
 8002652:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d107      	bne.n	800266c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800265c:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d121      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0f6      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d107      	bne.n	8002684 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d115      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0ea      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800268c:	4b30      	ldr	r3, [pc, #192]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0de      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800269c:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0d6      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ac:	4b28      	ldr	r3, [pc, #160]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f023 0207 	bic.w	r2, r3, #7
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4925      	ldr	r1, [pc, #148]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026be:	f7fe ffc3 	bl	8001648 <HAL_GetTick>
 80026c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c6:	f7fe ffbf 	bl	8001648 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0be      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026dc:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d1eb      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d010      	beq.n	800271c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	429a      	cmp	r2, r3
 8002708:	d208      	bcs.n	800271c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f023 020f 	bic.w	r2, r3, #15
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	490e      	ldr	r1, [pc, #56]	; (8002750 <HAL_RCC_ClockConfig+0x244>)
 8002718:	4313      	orrs	r3, r2
 800271a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d214      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 020f 	bic.w	r2, r3, #15
 8002732:	4906      	ldr	r1, [pc, #24]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <HAL_RCC_ClockConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e086      	b.n	800285a <HAL_RCC_ClockConfig+0x34e>
 800274c:	52002000 	.word	0x52002000
 8002750:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d010      	beq.n	8002782 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800276c:	429a      	cmp	r2, r3
 800276e:	d208      	bcs.n	8002782 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002770:	4b3c      	ldr	r3, [pc, #240]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	4939      	ldr	r1, [pc, #228]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 800277e:	4313      	orrs	r3, r2
 8002780:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d010      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800279a:	429a      	cmp	r2, r3
 800279c:	d208      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	492e      	ldr	r1, [pc, #184]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d010      	beq.n	80027de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699a      	ldr	r2, [r3, #24]
 80027c0:	4b28      	ldr	r3, [pc, #160]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d208      	bcs.n	80027de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027cc:	4b25      	ldr	r3, [pc, #148]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4922      	ldr	r1, [pc, #136]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d010      	beq.n	800280c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69da      	ldr	r2, [r3, #28]
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d208      	bcs.n	800280c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4917      	ldr	r1, [pc, #92]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 8002808:	4313      	orrs	r3, r2
 800280a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800280c:	f000 f834 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002810:	4602      	mov	r2, r0
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	4912      	ldr	r1, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x35c>)
 800281e:	5ccb      	ldrb	r3, [r1, r3]
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
 8002828:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_RCC_ClockConfig+0x358>)
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <HAL_RCC_ClockConfig+0x35c>)
 8002834:	5cd3      	ldrb	r3, [r2, r3]
 8002836:	f003 031f 	and.w	r3, r3, #31
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x360>)
 8002842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_RCC_ClockConfig+0x364>)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_RCC_ClockConfig+0x368>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe feb0 	bl	80015b4 <HAL_InitTick>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	58024400 	.word	0x58024400
 8002868:	08006e9c 	.word	0x08006e9c
 800286c:	24000004 	.word	0x24000004
 8002870:	24000000 	.word	0x24000000
 8002874:	24000008 	.word	0x24000008

08002878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800287e:	4bb3      	ldr	r3, [pc, #716]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002886:	2b18      	cmp	r3, #24
 8002888:	f200 8155 	bhi.w	8002b36 <HAL_RCC_GetSysClockFreq+0x2be>
 800288c:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <HAL_RCC_GetSysClockFreq+0x1c>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	080028f9 	.word	0x080028f9
 8002898:	08002b37 	.word	0x08002b37
 800289c:	08002b37 	.word	0x08002b37
 80028a0:	08002b37 	.word	0x08002b37
 80028a4:	08002b37 	.word	0x08002b37
 80028a8:	08002b37 	.word	0x08002b37
 80028ac:	08002b37 	.word	0x08002b37
 80028b0:	08002b37 	.word	0x08002b37
 80028b4:	0800291f 	.word	0x0800291f
 80028b8:	08002b37 	.word	0x08002b37
 80028bc:	08002b37 	.word	0x08002b37
 80028c0:	08002b37 	.word	0x08002b37
 80028c4:	08002b37 	.word	0x08002b37
 80028c8:	08002b37 	.word	0x08002b37
 80028cc:	08002b37 	.word	0x08002b37
 80028d0:	08002b37 	.word	0x08002b37
 80028d4:	08002925 	.word	0x08002925
 80028d8:	08002b37 	.word	0x08002b37
 80028dc:	08002b37 	.word	0x08002b37
 80028e0:	08002b37 	.word	0x08002b37
 80028e4:	08002b37 	.word	0x08002b37
 80028e8:	08002b37 	.word	0x08002b37
 80028ec:	08002b37 	.word	0x08002b37
 80028f0:	08002b37 	.word	0x08002b37
 80028f4:	0800292b 	.word	0x0800292b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028f8:	4b94      	ldr	r3, [pc, #592]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d009      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002904:	4b91      	ldr	r3, [pc, #580]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	08db      	lsrs	r3, r3, #3
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	4a90      	ldr	r2, [pc, #576]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
 8002914:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002916:	e111      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002918:	4b8d      	ldr	r3, [pc, #564]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800291a:	61bb      	str	r3, [r7, #24]
      break;
 800291c:	e10e      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800291e:	4b8d      	ldr	r3, [pc, #564]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002920:	61bb      	str	r3, [r7, #24]
      break;
 8002922:	e10b      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002924:	4b8c      	ldr	r3, [pc, #560]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002926:	61bb      	str	r3, [r7, #24]
      break;
 8002928:	e108      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800292a:	4b88      	ldr	r3, [pc, #544]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002934:	4b85      	ldr	r3, [pc, #532]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800293e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002940:	4b82      	ldr	r3, [pc, #520]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800294a:	4b80      	ldr	r3, [pc, #512]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002962:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80e1 	beq.w	8002b30 <HAL_RCC_GetSysClockFreq+0x2b8>
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b02      	cmp	r3, #2
 8002972:	f000 8083 	beq.w	8002a7c <HAL_RCC_GetSysClockFreq+0x204>
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b02      	cmp	r3, #2
 800297a:	f200 80a1 	bhi.w	8002ac0 <HAL_RCC_GetSysClockFreq+0x248>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x114>
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d056      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0x1c0>
 800298a:	e099      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800298c:	4b6f      	ldr	r3, [pc, #444]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0320 	and.w	r3, r3, #32
 8002994:	2b00      	cmp	r3, #0
 8002996:	d02d      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002998:	4b6c      	ldr	r3, [pc, #432]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	08db      	lsrs	r3, r3, #3
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	4a6b      	ldr	r2, [pc, #428]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
 80029a8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	ee07 3a90 	vmov	s15, r3
 80029b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c2:	4b62      	ldr	r3, [pc, #392]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80029d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80029f2:	e087      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	ee07 3a90 	vmov	s15, r3
 80029fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002b60 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a06:	4b51      	ldr	r3, [pc, #324]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a16:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a1a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a36:	e065      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a42:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002b64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a4a:	4b40      	ldr	r3, [pc, #256]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a5e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a7a:	e043      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a86:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b68 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aa2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002abe:	e021      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002b64 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ae6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002b5c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b02:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	0a5b      	lsrs	r3, r3, #9
 8002b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b0e:	3301      	adds	r3, #1
 8002b10:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	ee07 3a90 	vmov	s15, r3
 8002b18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b28:	ee17 3a90 	vmov	r3, s15
 8002b2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b2e:	e005      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61bb      	str	r3, [r7, #24]
      break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b38:	61bb      	str	r3, [r7, #24]
      break;
 8002b3a:	bf00      	nop
  }

  return sysclockfreq;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	58024400 	.word	0x58024400
 8002b50:	03d09000 	.word	0x03d09000
 8002b54:	003d0900 	.word	0x003d0900
 8002b58:	016e3600 	.word	0x016e3600
 8002b5c:	46000000 	.word	0x46000000
 8002b60:	4c742400 	.word	0x4c742400
 8002b64:	4a742400 	.word	0x4a742400
 8002b68:	4bb71b00 	.word	0x4bb71b00

08002b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8002b72:	f7ff fe81 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_RCC_GetHCLKFreq+0x50>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b84:	5ccb      	ldrb	r3, [r1, r3]
 8002b86:	f003 031f 	and.w	r3, r3, #31
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_RCC_GetHCLKFreq+0x50>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	4a07      	ldr	r2, [pc, #28]	; (8002bc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ba8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002baa:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	08006e9c 	.word	0x08006e9c
 8002bc4:	24000004 	.word	0x24000004
 8002bc8:	24000000 	.word	0x24000000

08002bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002bd0:	f7ff ffcc 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4904      	ldr	r1, [pc, #16]	; (8002bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	58024400 	.word	0x58024400
 8002bf4:	08006e9c 	.word	0x08006e9c

08002bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002bfc:	f7ff ffb6 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4904      	ldr	r1, [pc, #16]	; (8002c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	58024400 	.word	0x58024400
 8002c20:	08006e9c 	.word	0x08006e9c

08002c24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c28:	b0c8      	sub	sp, #288	; 0x120
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002c48:	2500      	movs	r5, #0
 8002c4a:	ea54 0305 	orrs.w	r3, r4, r5
 8002c4e:	d049      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c5a:	d02f      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002c5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c60:	d828      	bhi.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c66:	d01a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c6c:	d822      	bhi.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c76:	d007      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c78:	e01c      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c7a:	4ba7      	ldr	r3, [pc, #668]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	4aa6      	ldr	r2, [pc, #664]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c86:	e01a      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	2102      	movs	r1, #2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f001 fc43 	bl	800451c <RCCEx_PLL2_Config>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c9c:	e00f      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ca2:	3328      	adds	r3, #40	; 0x28
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 fcea 	bl	8004680 <RCCEx_PLL3_Config>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cb2:	e004      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002cba:	e000      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10a      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002cc6:	4b94      	ldr	r3, [pc, #592]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd4:	4a90      	ldr	r2, [pc, #576]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cd6:	430b      	orrs	r3, r1
 8002cd8:	6513      	str	r3, [r2, #80]	; 0x50
 8002cda:	e003      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cdc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ce0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002cf0:	f04f 0900 	mov.w	r9, #0
 8002cf4:	ea58 0309 	orrs.w	r3, r8, r9
 8002cf8:	d047      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d82a      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002d04:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0a:	bf00      	nop
 8002d0c:	08002d21 	.word	0x08002d21
 8002d10:	08002d2f 	.word	0x08002d2f
 8002d14:	08002d45 	.word	0x08002d45
 8002d18:	08002d63 	.word	0x08002d63
 8002d1c:	08002d63 	.word	0x08002d63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d20:	4b7d      	ldr	r3, [pc, #500]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	4a7c      	ldr	r2, [pc, #496]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d2c:	e01a      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d32:	3308      	adds	r3, #8
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 fbf0 	bl	800451c <RCCEx_PLL2_Config>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d42:	e00f      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d48:	3328      	adds	r3, #40	; 0x28
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f001 fc97 	bl	8004680 <RCCEx_PLL3_Config>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d58:	e004      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d60:	e000      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d6c:	4b6a      	ldr	r3, [pc, #424]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d70:	f023 0107 	bic.w	r1, r3, #7
 8002d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	4a67      	ldr	r2, [pc, #412]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6513      	str	r3, [r2, #80]	; 0x50
 8002d80:	e003      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002d96:	f04f 0b00 	mov.w	fp, #0
 8002d9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d9e:	d054      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002daa:	d036      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002dac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002db0:	d82f      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db6:	d032      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dbc:	d829      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8002dc0:	d02f      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8002dc4:	d825      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002dc6:	2b80      	cmp	r3, #128	; 0x80
 8002dc8:	d018      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002dca:	2b80      	cmp	r3, #128	; 0x80
 8002dcc:	d821      	bhi.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002dd2:	2b40      	cmp	r3, #64	; 0x40
 8002dd4:	d007      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002dd6:	e01c      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd8:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	4a4e      	ldr	r2, [pc, #312]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002de4:	e01e      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dea:	3308      	adds	r3, #8
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 fb94 	bl	800451c <RCCEx_PLL2_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002dfa:	e013      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e00:	3328      	adds	r3, #40	; 0x28
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 fc3b 	bl	8004680 <RCCEx_PLL3_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002e10:	e008      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e18:	e004      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002e1a:	bf00      	nop
 8002e1c:	e002      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002e1e:	bf00      	nop
 8002e20:	e000      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002e2c:	4b3a      	ldr	r3, [pc, #232]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e30:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	4a37      	ldr	r2, [pc, #220]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	6513      	str	r3, [r2, #80]	; 0x50
 8002e40:	e003      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002e56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002e64:	460b      	mov	r3, r1
 8002e66:	4313      	orrs	r3, r2
 8002e68:	d05c      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e70:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002e74:	d03b      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002e76:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002e7a:	d834      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e80:	d037      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e86:	d82e      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e8c:	d033      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002e8e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e92:	d828      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e98:	d01a      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	d822      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea8:	d007      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002eaa:	e01c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002eb8:	e01e      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 fb2a 	bl	800451c <RCCEx_PLL2_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002ece:	e013      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ed4:	3328      	adds	r3, #40	; 0x28
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 fbd1 	bl	8004680 <RCCEx_PLL3_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002eec:	e004      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002eee:	bf00      	nop
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002ef2:	bf00      	nop
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ef8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10d      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f04:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002f08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	4a02      	ldr	r2, [pc, #8]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f10:	430b      	orrs	r3, r1
 8002f12:	6513      	str	r3, [r2, #80]	; 0x50
 8002f14:	e006      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002f16:	bf00      	nop
 8002f18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002f30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002f34:	2300      	movs	r3, #0
 8002f36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002f3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4313      	orrs	r3, r2
 8002f42:	d03a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	2b30      	cmp	r3, #48	; 0x30
 8002f4c:	d01f      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002f4e:	2b30      	cmp	r3, #48	; 0x30
 8002f50:	d819      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d00c      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d815      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d019      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d111      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f62:	4bae      	ldr	r3, [pc, #696]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	4aad      	ldr	r2, [pc, #692]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002f6e:	e011      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f74:	3308      	adds	r3, #8
 8002f76:	2102      	movs	r1, #2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f001 facf 	bl	800451c <RCCEx_PLL2_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002f84:	e006      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f8c:	e002      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002f8e:	bf00      	nop
 8002f90:	e000      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002f92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f9c:	4b9f      	ldr	r3, [pc, #636]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	4a9c      	ldr	r2, [pc, #624]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb0:	e003      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fb6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002fc6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002fd0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	d051      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fe4:	d035      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fea:	d82e      	bhi.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002fec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ff0:	d031      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002ff2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ff6:	d828      	bhi.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffc:	d01a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003002:	d822      	bhi.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300c:	d007      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800300e:	e01c      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003010:	4b82      	ldr	r3, [pc, #520]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	4a81      	ldr	r2, [pc, #516]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800301c:	e01c      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800301e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003022:	3308      	adds	r3, #8
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f001 fa78 	bl	800451c <RCCEx_PLL2_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003032:	e011      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003038:	3328      	adds	r3, #40	; 0x28
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f001 fb1f 	bl	8004680 <RCCEx_PLL3_Config>
 8003042:	4603      	mov	r3, r0
 8003044:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003048:	e006      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003050:	e002      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003052:	bf00      	nop
 8003054:	e000      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003058:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003060:	4b6e      	ldr	r3, [pc, #440]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003064:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800306c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800306e:	4a6b      	ldr	r2, [pc, #428]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003070:	430b      	orrs	r3, r1
 8003072:	6513      	str	r3, [r2, #80]	; 0x50
 8003074:	e003      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003076:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800307a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800307e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800308a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800308e:	2300      	movs	r3, #0
 8003090:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003094:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003098:	460b      	mov	r3, r1
 800309a:	4313      	orrs	r3, r2
 800309c:	d053      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800309e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a8:	d033      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80030aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ae:	d82c      	bhi.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80030b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030b4:	d02f      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80030b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030ba:	d826      	bhi.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80030bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030c0:	d02b      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80030c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030c6:	d820      	bhi.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80030c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030cc:	d012      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80030ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030d2:	d81a      	bhi.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d022      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80030d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030dc:	d115      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030e2:	3308      	adds	r3, #8
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 fa18 	bl	800451c <RCCEx_PLL2_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80030f2:	e015      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030f8:	3328      	adds	r3, #40	; 0x28
 80030fa:	2101      	movs	r1, #1
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 fabf 	bl	8004680 <RCCEx_PLL3_Config>
 8003102:	4603      	mov	r3, r0
 8003104:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003108:	e00a      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003110:	e006      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003112:	bf00      	nop
 8003114:	e004      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003116:	bf00      	nop
 8003118:	e002      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800311e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003120:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003128:	4b3c      	ldr	r3, [pc, #240]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003136:	4a39      	ldr	r2, [pc, #228]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003138:	430b      	orrs	r3, r1
 800313a:	6513      	str	r3, [r2, #80]	; 0x50
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003142:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003152:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800315c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003160:	460b      	mov	r3, r1
 8003162:	4313      	orrs	r3, r2
 8003164:	d060      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800316a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800316e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003172:	d039      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003174:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003178:	d832      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800317a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800317e:	d035      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003184:	d82c      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318a:	d031      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d826      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003192:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003196:	d02d      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003198:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800319c:	d820      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800319e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031a2:	d012      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80031a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031a8:	d81a      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d024      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80031ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031b2:	d115      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031b8:	3308      	adds	r3, #8
 80031ba:	2101      	movs	r1, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f001 f9ad 	bl	800451c <RCCEx_PLL2_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031c8:	e017      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031ce:	3328      	adds	r3, #40	; 0x28
 80031d0:	2101      	movs	r1, #1
 80031d2:	4618      	mov	r0, r3
 80031d4:	f001 fa54 	bl	8004680 <RCCEx_PLL3_Config>
 80031d8:	4603      	mov	r3, r0
 80031da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031de:	e00c      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80031e6:	e008      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031e8:	bf00      	nop
 80031ea:	e006      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031ec:	bf00      	nop
 80031ee:	e004      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031f0:	bf00      	nop
 80031f2:	e002      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031f4:	bf00      	nop
 80031f6:	e000      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80031f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10e      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800320a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800320e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003212:	4a02      	ldr	r2, [pc, #8]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003214:	430b      	orrs	r3, r1
 8003216:	6593      	str	r3, [r2, #88]	; 0x58
 8003218:	e006      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800321a:	bf00      	nop
 800321c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003220:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003224:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003238:	2300      	movs	r3, #0
 800323a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800323e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003242:	460b      	mov	r3, r1
 8003244:	4313      	orrs	r3, r2
 8003246:	d037      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800324c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003252:	d00e      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003258:	d816      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d018      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800325e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003262:	d111      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003264:	4bc4      	ldr	r3, [pc, #784]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	4ac3      	ldr	r2, [pc, #780]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800326a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003270:	e00f      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003276:	3308      	adds	r3, #8
 8003278:	2101      	movs	r1, #1
 800327a:	4618      	mov	r0, r3
 800327c:	f001 f94e 	bl	800451c <RCCEx_PLL2_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003286:	e004      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800328e:	e000      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003292:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800329a:	4bb7      	ldr	r3, [pc, #732]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80032a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032a8:	4ab3      	ldr	r2, [pc, #716]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032aa:	430b      	orrs	r3, r1
 80032ac:	6513      	str	r3, [r2, #80]	; 0x50
 80032ae:	e003      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80032c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80032ce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4313      	orrs	r3, r2
 80032d6:	d039      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80032d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d81c      	bhi.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80032e2:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80032e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e8:	08003325 	.word	0x08003325
 80032ec:	080032f9 	.word	0x080032f9
 80032f0:	08003307 	.word	0x08003307
 80032f4:	08003325 	.word	0x08003325
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f8:	4b9f      	ldr	r3, [pc, #636]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	4a9e      	ldr	r2, [pc, #632]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80032fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003304:	e00f      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800330a:	3308      	adds	r3, #8
 800330c:	2102      	movs	r1, #2
 800330e:	4618      	mov	r0, r3
 8003310:	f001 f904 	bl	800451c <RCCEx_PLL2_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800331a:	e004      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003322:	e000      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003326:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800332e:	4b92      	ldr	r3, [pc, #584]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003332:	f023 0103 	bic.w	r1, r3, #3
 8003336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800333a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333c:	4a8e      	ldr	r2, [pc, #568]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800333e:	430b      	orrs	r3, r1
 8003340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003342:	e003      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003344:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003348:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800334c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003358:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800335c:	2300      	movs	r3, #0
 800335e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003362:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003366:	460b      	mov	r3, r1
 8003368:	4313      	orrs	r3, r2
 800336a:	f000 8099 	beq.w	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336e:	4b83      	ldr	r3, [pc, #524]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a82      	ldr	r2, [pc, #520]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800337a:	f7fe f965 	bl	8001648 <HAL_GetTick>
 800337e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003382:	e00b      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fe f960 	bl	8001648 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b64      	cmp	r3, #100	; 0x64
 8003392:	d903      	bls.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800339a:	e005      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800339c:	4b77      	ldr	r3, [pc, #476]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0ed      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80033a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d173      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80033b0:	4b71      	ldr	r3, [pc, #452]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033bc:	4053      	eors	r3, r2
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d015      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033c6:	4b6c      	ldr	r3, [pc, #432]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d2:	4b69      	ldr	r3, [pc, #420]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	4a68      	ldr	r2, [pc, #416]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033de:	4b66      	ldr	r3, [pc, #408]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	4a65      	ldr	r2, [pc, #404]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80033ea:	4a63      	ldr	r2, [pc, #396]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80033ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fe:	d118      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe f922 	bl	8001648 <HAL_GetTick>
 8003404:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003408:	e00d      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fe f91d 	bl	8001648 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003414:	1ad2      	subs	r2, r2, r3
 8003416:	f241 3388 	movw	r3, #5000	; 0x1388
 800341a:	429a      	cmp	r2, r3
 800341c:	d903      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003424:	e005      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003426:	4b54      	ldr	r3, [pc, #336]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0eb      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003432:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003436:	2b00      	cmp	r3, #0
 8003438:	d129      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800343a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800343e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344a:	d10e      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800344c:	4b4a      	ldr	r3, [pc, #296]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003458:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800345c:	091a      	lsrs	r2, r3, #4
 800345e:	4b48      	ldr	r3, [pc, #288]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003460:	4013      	ands	r3, r2
 8003462:	4a45      	ldr	r2, [pc, #276]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003464:	430b      	orrs	r3, r1
 8003466:	6113      	str	r3, [r2, #16]
 8003468:	e005      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800346a:	4b43      	ldr	r3, [pc, #268]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	4a42      	ldr	r2, [pc, #264]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003470:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003474:	6113      	str	r3, [r2, #16]
 8003476:	4b40      	ldr	r3, [pc, #256]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003478:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800347a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003486:	4a3c      	ldr	r2, [pc, #240]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003488:	430b      	orrs	r3, r1
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	e008      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800348e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003492:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003496:	e003      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800349c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80034a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f002 0301 	and.w	r3, r2, #1
 80034ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034b6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4313      	orrs	r3, r2
 80034be:	f000 8090 	beq.w	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80034c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ca:	2b28      	cmp	r3, #40	; 0x28
 80034cc:	d870      	bhi.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80034ce:	a201      	add	r2, pc, #4	; (adr r2, 80034d4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80034d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d4:	080035b9 	.word	0x080035b9
 80034d8:	080035b1 	.word	0x080035b1
 80034dc:	080035b1 	.word	0x080035b1
 80034e0:	080035b1 	.word	0x080035b1
 80034e4:	080035b1 	.word	0x080035b1
 80034e8:	080035b1 	.word	0x080035b1
 80034ec:	080035b1 	.word	0x080035b1
 80034f0:	080035b1 	.word	0x080035b1
 80034f4:	08003585 	.word	0x08003585
 80034f8:	080035b1 	.word	0x080035b1
 80034fc:	080035b1 	.word	0x080035b1
 8003500:	080035b1 	.word	0x080035b1
 8003504:	080035b1 	.word	0x080035b1
 8003508:	080035b1 	.word	0x080035b1
 800350c:	080035b1 	.word	0x080035b1
 8003510:	080035b1 	.word	0x080035b1
 8003514:	0800359b 	.word	0x0800359b
 8003518:	080035b1 	.word	0x080035b1
 800351c:	080035b1 	.word	0x080035b1
 8003520:	080035b1 	.word	0x080035b1
 8003524:	080035b1 	.word	0x080035b1
 8003528:	080035b1 	.word	0x080035b1
 800352c:	080035b1 	.word	0x080035b1
 8003530:	080035b1 	.word	0x080035b1
 8003534:	080035b9 	.word	0x080035b9
 8003538:	080035b1 	.word	0x080035b1
 800353c:	080035b1 	.word	0x080035b1
 8003540:	080035b1 	.word	0x080035b1
 8003544:	080035b1 	.word	0x080035b1
 8003548:	080035b1 	.word	0x080035b1
 800354c:	080035b1 	.word	0x080035b1
 8003550:	080035b1 	.word	0x080035b1
 8003554:	080035b9 	.word	0x080035b9
 8003558:	080035b1 	.word	0x080035b1
 800355c:	080035b1 	.word	0x080035b1
 8003560:	080035b1 	.word	0x080035b1
 8003564:	080035b1 	.word	0x080035b1
 8003568:	080035b1 	.word	0x080035b1
 800356c:	080035b1 	.word	0x080035b1
 8003570:	080035b1 	.word	0x080035b1
 8003574:	080035b9 	.word	0x080035b9
 8003578:	58024400 	.word	0x58024400
 800357c:	58024800 	.word	0x58024800
 8003580:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003588:	3308      	adds	r3, #8
 800358a:	2101      	movs	r1, #1
 800358c:	4618      	mov	r0, r3
 800358e:	f000 ffc5 	bl	800451c <RCCEx_PLL2_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003598:	e00f      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800359a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359e:	3328      	adds	r3, #40	; 0x28
 80035a0:	2101      	movs	r1, #1
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 f86c 	bl	8004680 <RCCEx_PLL3_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80035ae:	e004      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035b6:	e000      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80035b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10b      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80035c2:	4bc0      	ldr	r3, [pc, #768]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80035ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d2:	4abc      	ldr	r2, [pc, #752]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6553      	str	r3, [r2, #84]	; 0x54
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80035e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	f002 0302 	and.w	r3, r2, #2
 80035ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035f2:	2300      	movs	r3, #0
 80035f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80035f8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80035fc:	460b      	mov	r3, r1
 80035fe:	4313      	orrs	r3, r2
 8003600:	d043      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360a:	2b05      	cmp	r3, #5
 800360c:	d824      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800360e:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	08003661 	.word	0x08003661
 8003618:	0800362d 	.word	0x0800362d
 800361c:	08003643 	.word	0x08003643
 8003620:	08003661 	.word	0x08003661
 8003624:	08003661 	.word	0x08003661
 8003628:	08003661 	.word	0x08003661
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800362c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003630:	3308      	adds	r3, #8
 8003632:	2101      	movs	r1, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f000 ff71 	bl	800451c <RCCEx_PLL2_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003640:	e00f      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003646:	3328      	adds	r3, #40	; 0x28
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f001 f818 	bl	8004680 <RCCEx_PLL3_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003656:	e004      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003662:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800366a:	4b96      	ldr	r3, [pc, #600]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	f023 0107 	bic.w	r1, r3, #7
 8003672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367a:	4a92      	ldr	r2, [pc, #584]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800367c:	430b      	orrs	r3, r1
 800367e:	6553      	str	r3, [r2, #84]	; 0x54
 8003680:	e003      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003682:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003686:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800368a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	f002 0304 	and.w	r3, r2, #4
 8003696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036a0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4313      	orrs	r3, r2
 80036a8:	d043      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80036aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d824      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	08003709 	.word	0x08003709
 80036c0:	080036d5 	.word	0x080036d5
 80036c4:	080036eb 	.word	0x080036eb
 80036c8:	08003709 	.word	0x08003709
 80036cc:	08003709 	.word	0x08003709
 80036d0:	08003709 	.word	0x08003709
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d8:	3308      	adds	r3, #8
 80036da:	2101      	movs	r1, #1
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 ff1d 	bl	800451c <RCCEx_PLL2_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036e8:	e00f      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ee:	3328      	adds	r3, #40	; 0x28
 80036f0:	2101      	movs	r1, #1
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 ffc4 	bl	8004680 <RCCEx_PLL3_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80036fe:	e004      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10b      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003712:	4b6c      	ldr	r3, [pc, #432]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003716:	f023 0107 	bic.w	r1, r3, #7
 800371a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003722:	4a68      	ldr	r2, [pc, #416]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003724:	430b      	orrs	r3, r1
 8003726:	6593      	str	r3, [r2, #88]	; 0x58
 8003728:	e003      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800372e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	f002 0320 	and.w	r3, r2, #32
 800373e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003742:	2300      	movs	r3, #0
 8003744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800374c:	460b      	mov	r3, r1
 800374e:	4313      	orrs	r3, r2
 8003750:	d055      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800375a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800375e:	d033      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003764:	d82c      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376a:	d02f      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003770:	d826      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003772:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003776:	d02b      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003778:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800377c:	d820      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800377e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003782:	d012      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003788:	d81a      	bhi.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d022      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800378e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003792:	d115      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003798:	3308      	adds	r3, #8
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f000 febd 	bl	800451c <RCCEx_PLL2_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037a8:	e015      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ae:	3328      	adds	r3, #40	; 0x28
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 ff64 	bl	8004680 <RCCEx_PLL3_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80037be:	e00a      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037c6:	e006      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80037c8:	bf00      	nop
 80037ca:	e004      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80037cc:	bf00      	nop
 80037ce:	e002      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80037d0:	bf00      	nop
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80037d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10b      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037de:	4b39      	ldr	r3, [pc, #228]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80037e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ee:	4a35      	ldr	r2, [pc, #212]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6553      	str	r3, [r2, #84]	; 0x54
 80037f4:	e003      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800380a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800380e:	2300      	movs	r3, #0
 8003810:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003814:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003818:	460b      	mov	r3, r1
 800381a:	4313      	orrs	r3, r2
 800381c:	d058      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800381e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003822:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003826:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800382a:	d033      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800382c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003830:	d82c      	bhi.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003836:	d02f      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383c:	d826      	bhi.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800383e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003842:	d02b      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003848:	d820      	bhi.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800384a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384e:	d012      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003854:	d81a      	bhi.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d022      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385e:	d115      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003864:	3308      	adds	r3, #8
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fe57 	bl	800451c <RCCEx_PLL2_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003874:	e015      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800387a:	3328      	adds	r3, #40	; 0x28
 800387c:	2102      	movs	r1, #2
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fefe 	bl	8004680 <RCCEx_PLL3_Config>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800388a:	e00a      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003892:	e006      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003894:	bf00      	nop
 8003896:	e004      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003898:	bf00      	nop
 800389a:	e002      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800389c:	bf00      	nop
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80038a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10e      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80038b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038ba:	4a02      	ldr	r2, [pc, #8]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80038bc:	430b      	orrs	r3, r1
 80038be:	6593      	str	r3, [r2, #88]	; 0x58
 80038c0:	e006      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80038c2:	bf00      	nop
 80038c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80038d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80038dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038e0:	2300      	movs	r3, #0
 80038e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80038ea:	460b      	mov	r3, r1
 80038ec:	4313      	orrs	r3, r2
 80038ee:	d055      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80038f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80038fc:	d033      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80038fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003902:	d82c      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003908:	d02f      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800390a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800390e:	d826      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003910:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003914:	d02b      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003916:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800391a:	d820      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800391c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003920:	d012      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8003922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003926:	d81a      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d022      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800392c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003930:	d115      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003936:	3308      	adds	r3, #8
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fdee 	bl	800451c <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003946:	e015      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800394c:	3328      	adds	r3, #40	; 0x28
 800394e:	2102      	movs	r1, #2
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fe95 	bl	8004680 <RCCEx_PLL3_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800395c:	e00a      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003966:	bf00      	nop
 8003968:	e004      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003974:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10b      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800397c:	4ba1      	ldr	r3, [pc, #644]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003988:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800398c:	4a9d      	ldr	r2, [pc, #628]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800398e:	430b      	orrs	r3, r1
 8003990:	6593      	str	r3, [r2, #88]	; 0x58
 8003992:	e003      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003994:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003998:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800399c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f002 0308 	and.w	r3, r2, #8
 80039a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039ac:	2300      	movs	r3, #0
 80039ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80039b6:	460b      	mov	r3, r1
 80039b8:	4313      	orrs	r3, r2
 80039ba:	d01e      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80039bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ce:	3328      	adds	r3, #40	; 0x28
 80039d0:	2102      	movs	r1, #2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fe54 	bl	8004680 <RCCEx_PLL3_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80039e4:	4b87      	ldr	r3, [pc, #540]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f4:	4a83      	ldr	r2, [pc, #524]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	f002 0310 	and.w	r3, r2, #16
 8003a06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a10:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003a14:	460b      	mov	r3, r1
 8003a16:	4313      	orrs	r3, r2
 8003a18:	d01e      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003a1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a26:	d10c      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a2c:	3328      	adds	r3, #40	; 0x28
 8003a2e:	2102      	movs	r1, #2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fe25 	bl	8004680 <RCCEx_PLL3_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a42:	4b70      	ldr	r3, [pc, #448]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a52:	4a6c      	ldr	r2, [pc, #432]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a60:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a6e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003a72:	460b      	mov	r3, r1
 8003a74:	4313      	orrs	r3, r2
 8003a76:	d03e      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a84:	d022      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a8a:	d81b      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a94:	d00b      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003a96:	e015      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 fd3b 	bl	800451c <RCCEx_PLL2_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003aac:	e00f      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab2:	3328      	adds	r3, #40	; 0x28
 8003ab4:	2102      	movs	r1, #2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fde2 	bl	8004680 <RCCEx_PLL3_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ac2:	e004      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003aca:	e000      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ace:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10b      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ad6:	4b4b      	ldr	r3, [pc, #300]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ae6:	4a47      	ldr	r2, [pc, #284]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6593      	str	r3, [r2, #88]	; 0x58
 8003aec:	e003      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003af2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003b02:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b04:	2300      	movs	r3, #0
 8003b06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b08:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	d03b      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b1e:	d01f      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003b20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b24:	d818      	bhi.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b2a:	d003      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003b2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b30:	d007      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8003b32:	e011      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b34:	4b33      	ldr	r3, [pc, #204]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	4a32      	ldr	r2, [pc, #200]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b40:	e00f      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b46:	3328      	adds	r3, #40	; 0x28
 8003b48:	2101      	movs	r1, #1
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fd98 	bl	8004680 <RCCEx_PLL3_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003b56:	e004      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b6a:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	4a22      	ldr	r2, [pc, #136]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	6553      	str	r3, [r2, #84]	; 0x54
 8003b80:	e003      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003b96:	673b      	str	r3, [r7, #112]	; 0x70
 8003b98:	2300      	movs	r3, #0
 8003b9a:	677b      	str	r3, [r7, #116]	; 0x74
 8003b9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	d034      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb4:	d007      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003bb6:	e011      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	4a11      	ldr	r2, [pc, #68]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bc4:	e00e      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bca:	3308      	adds	r3, #8
 8003bcc:	2102      	movs	r1, #2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fca4 	bl	800451c <RCCEx_PLL2_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003bda:	e003      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfa:	4a02      	ldr	r2, [pc, #8]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c00:	e006      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003c02:	bf00      	nop
 8003c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c1e:	2300      	movs	r3, #0
 8003c20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c22:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003c26:	460b      	mov	r3, r1
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	d00c      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c30:	3328      	adds	r3, #40	; 0x28
 8003c32:	2102      	movs	r1, #2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fd23 	bl	8004680 <RCCEx_PLL3_Config>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003c52:	663b      	str	r3, [r7, #96]	; 0x60
 8003c54:	2300      	movs	r3, #0
 8003c56:	667b      	str	r3, [r7, #100]	; 0x64
 8003c58:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	d038      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c6e:	d018      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003c70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c74:	d811      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c7a:	d014      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c80:	d80b      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d011      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8a:	d106      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8c:	4bc3      	ldr	r3, [pc, #780]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	4ac2      	ldr	r2, [pc, #776]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003c98:	e008      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ca0:	e004      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003ca2:	bf00      	nop
 8003ca4:	e002      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003ca6:	bf00      	nop
 8003ca8:	e000      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10b      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cb4:	4bb9      	ldr	r3, [pc, #740]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	4ab5      	ldr	r2, [pc, #724]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	6553      	str	r3, [r2, #84]	; 0x54
 8003cca:	e003      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003ce0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ce6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003cea:	460b      	mov	r3, r1
 8003cec:	4313      	orrs	r3, r2
 8003cee:	d009      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cf0:	4baa      	ldr	r3, [pc, #680]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cfe:	4aa7      	ldr	r2, [pc, #668]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003d10:	653b      	str	r3, [r7, #80]	; 0x50
 8003d12:	2300      	movs	r3, #0
 8003d14:	657b      	str	r3, [r7, #84]	; 0x54
 8003d16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d20:	4b9e      	ldr	r3, [pc, #632]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d24:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a9b      	ldr	r2, [pc, #620]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d30:	430b      	orrs	r3, r1
 8003d32:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003d40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d42:	2300      	movs	r3, #0
 8003d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d46:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	d009      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003d50:	4b92      	ldr	r3, [pc, #584]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003d58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5e:	4a8f      	ldr	r2, [pc, #572]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d60:	430b      	orrs	r3, r1
 8003d62:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003d70:	643b      	str	r3, [r7, #64]	; 0x40
 8003d72:	2300      	movs	r3, #0
 8003d74:	647b      	str	r3, [r7, #68]	; 0x44
 8003d76:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	d00e      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d80:	4b86      	ldr	r3, [pc, #536]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	4a85      	ldr	r2, [pc, #532]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d8a:	6113      	str	r3, [r2, #16]
 8003d8c:	4b83      	ldr	r3, [pc, #524]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d8e:	6919      	ldr	r1, [r3, #16]
 8003d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d98:	4a80      	ldr	r2, [pc, #512]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dac:	2300      	movs	r3, #0
 8003dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003db0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003db4:	460b      	mov	r3, r1
 8003db6:	4313      	orrs	r3, r2
 8003db8:	d009      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003dba:	4b78      	ldr	r3, [pc, #480]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003dc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	4a74      	ldr	r2, [pc, #464]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003dda:	633b      	str	r3, [r7, #48]	; 0x30
 8003ddc:	2300      	movs	r3, #0
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
 8003de0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003de4:	460b      	mov	r3, r1
 8003de6:	4313      	orrs	r3, r2
 8003de8:	d00a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003dea:	4b6c      	ldr	r3, [pc, #432]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dee:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfa:	4a68      	ldr	r2, [pc, #416]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	2100      	movs	r1, #0
 8003e0a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e12:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003e16:	460b      	mov	r3, r1
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	d011      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e20:	3308      	adds	r3, #8
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fb79 	bl	800451c <RCCEx_PLL2_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003e30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	2100      	movs	r1, #0
 8003e4a:	6239      	str	r1, [r7, #32]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003e56:	460b      	mov	r3, r1
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	d011      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e60:	3308      	adds	r3, #8
 8003e62:	2101      	movs	r1, #1
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fb59 	bl	800451c <RCCEx_PLL2_Config>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003e70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e88:	2100      	movs	r1, #0
 8003e8a:	61b9      	str	r1, [r7, #24]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003e96:	460b      	mov	r3, r1
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	d011      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea0:	3308      	adds	r3, #8
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fb39 	bl	800451c <RCCEx_PLL2_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ebc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	2100      	movs	r1, #0
 8003eca:	6139      	str	r1, [r7, #16]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	d011      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee0:	3328      	adds	r3, #40	; 0x28
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fbcb 	bl	8004680 <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003efc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	2100      	movs	r1, #0
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003f16:	460b      	mov	r3, r1
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	d011      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f20:	3328      	adds	r3, #40	; 0x28
 8003f22:	2101      	movs	r1, #1
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fbab 	bl	8004680 <RCCEx_PLL3_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003f30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	2100      	movs	r1, #0
 8003f4a:	6039      	str	r1, [r7, #0]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f56:	460b      	mov	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	d011      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f60:	3328      	adds	r3, #40	; 0x28
 8003f62:	2102      	movs	r1, #2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fb8b 	bl	8004680 <RCCEx_PLL3_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003f70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003f80:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e000      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003f94:	46bd      	mov	sp, r7
 8003f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9a:	bf00      	nop
 8003f9c:	58024400 	.word	0x58024400

08003fa0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003fa4:	f7fe fde2 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	091b      	lsrs	r3, r3, #4
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	58024400 	.word	0x58024400
 8003fc8:	08006e9c 	.word	0x08006e9c

08003fcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b089      	sub	sp, #36	; 0x24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fd4:	4ba1      	ldr	r3, [pc, #644]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003fde:	4b9f      	ldr	r3, [pc, #636]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	0b1b      	lsrs	r3, r3, #12
 8003fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003fea:	4b9c      	ldr	r3, [pc, #624]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003ff6:	4b99      	ldr	r3, [pc, #612]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	08db      	lsrs	r3, r3, #3
 8003ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8111 	beq.w	800423c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b02      	cmp	r3, #2
 800401e:	f000 8083 	beq.w	8004128 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b02      	cmp	r3, #2
 8004026:	f200 80a1 	bhi.w	800416c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d056      	beq.n	80040e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004036:	e099      	b.n	800416c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004038:	4b88      	ldr	r3, [pc, #544]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d02d      	beq.n	80040a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004044:	4b85      	ldr	r3, [pc, #532]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	08db      	lsrs	r3, r3, #3
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	4a84      	ldr	r2, [pc, #528]	; (8004260 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406e:	4b7b      	ldr	r3, [pc, #492]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004082:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800409e:	e087      	b.n	80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004268 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b2:	4b6a      	ldr	r3, [pc, #424]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040e2:	e065      	b.n	80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800426c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f6:	4b59      	ldr	r3, [pc, #356]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004106:	ed97 6a03 	vldr	s12, [r7, #12]
 800410a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800410e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800411a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004126:	e043      	b.n	80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413a:	4b48      	ldr	r3, [pc, #288]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414a:	ed97 6a03 	vldr	s12, [r7, #12]
 800414e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800415e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800416a:	e021      	b.n	80041b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800426c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800417a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417e:	4b37      	ldr	r3, [pc, #220]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004192:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800419a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80041b0:	4b2a      	ldr	r3, [pc, #168]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	0a5b      	lsrs	r3, r3, #9
 80041b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d6:	ee17 2a90 	vmov	r2, s15
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80041de:	4b1f      	ldr	r3, [pc, #124]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80041fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004204:	ee17 2a90 	vmov	r2, s15
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	0e1b      	lsrs	r3, r3, #24
 8004212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004226:	edd7 6a07 	vldr	s13, [r7, #28]
 800422a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800422e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004232:	ee17 2a90 	vmov	r2, s15
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800423a:	e008      	b.n	800424e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
}
 800424e:	bf00      	nop
 8004250:	3724      	adds	r7, #36	; 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	58024400 	.word	0x58024400
 8004260:	03d09000 	.word	0x03d09000
 8004264:	46000000 	.word	0x46000000
 8004268:	4c742400 	.word	0x4c742400
 800426c:	4a742400 	.word	0x4a742400
 8004270:	4bb71b00 	.word	0x4bb71b00

08004274 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	; 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800427c:	4ba1      	ldr	r3, [pc, #644]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004286:	4b9f      	ldr	r3, [pc, #636]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	0d1b      	lsrs	r3, r3, #20
 800428c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004290:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004292:	4b9c      	ldr	r3, [pc, #624]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800429e:	4b99      	ldr	r3, [pc, #612]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	08db      	lsrs	r3, r3, #3
 80042a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	fb02 f303 	mul.w	r3, r2, r3
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8111 	beq.w	80044e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	f000 8083 	beq.w	80043d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	f200 80a1 	bhi.w	8004414 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d056      	beq.n	800438c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80042de:	e099      	b.n	8004414 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042e0:	4b88      	ldr	r3, [pc, #544]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d02d      	beq.n	8004348 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042ec:	4b85      	ldr	r3, [pc, #532]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	08db      	lsrs	r3, r3, #3
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	4a84      	ldr	r2, [pc, #528]	; (8004508 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
 80042fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	ee07 3a90 	vmov	s15, r3
 8004304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004316:	4b7b      	ldr	r3, [pc, #492]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004326:	ed97 6a03 	vldr	s12, [r7, #12]
 800432a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800450c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800432e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004342:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004346:	e087      	b.n	8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004510 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800435a:	4b6a      	ldr	r3, [pc, #424]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800436a:	ed97 6a03 	vldr	s12, [r7, #12]
 800436e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800450c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800437a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800437e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800438a:	e065      	b.n	8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004396:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004514 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800439a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439e:	4b59      	ldr	r3, [pc, #356]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80043b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800450c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ce:	e043      	b.n	8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80043de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e2:	4b48      	ldr	r3, [pc, #288]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800450c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004412:	e021      	b.n	8004458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004514 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004426:	4b37      	ldr	r3, [pc, #220]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004436:	ed97 6a03 	vldr	s12, [r7, #12]
 800443a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800450c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800443e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004456:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004458:	4b2a      	ldr	r3, [pc, #168]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	0a5b      	lsrs	r3, r3, #9
 800445e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800446e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004472:	edd7 6a07 	vldr	s13, [r7, #28]
 8004476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800447a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800447e:	ee17 2a90 	vmov	r2, s15
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004486:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	0c1b      	lsrs	r3, r3, #16
 800448c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004490:	ee07 3a90 	vmov	s15, r3
 8004494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800449c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80044a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ac:	ee17 2a90 	vmov	r2, s15
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80044b4:	4b13      	ldr	r3, [pc, #76]	; (8004504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	0e1b      	lsrs	r3, r3, #24
 80044ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80044d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044da:	ee17 2a90 	vmov	r2, s15
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80044e2:	e008      	b.n	80044f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	609a      	str	r2, [r3, #8]
}
 80044f6:	bf00      	nop
 80044f8:	3724      	adds	r7, #36	; 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	58024400 	.word	0x58024400
 8004508:	03d09000 	.word	0x03d09000
 800450c:	46000000 	.word	0x46000000
 8004510:	4c742400 	.word	0x4c742400
 8004514:	4a742400 	.word	0x4a742400
 8004518:	4bb71b00 	.word	0x4bb71b00

0800451c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800452a:	4b53      	ldr	r3, [pc, #332]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b03      	cmp	r3, #3
 8004534:	d101      	bne.n	800453a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e099      	b.n	800466e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800453a:	4b4f      	ldr	r3, [pc, #316]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a4e      	ldr	r2, [pc, #312]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004540:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004546:	f7fd f87f 	bl	8001648 <HAL_GetTick>
 800454a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800454c:	e008      	b.n	8004560 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800454e:	f7fd f87b 	bl	8001648 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e086      	b.n	800466e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004560:	4b45      	ldr	r3, [pc, #276]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f0      	bne.n	800454e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800456c:	4b42      	ldr	r3, [pc, #264]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	031b      	lsls	r3, r3, #12
 800457a:	493f      	ldr	r1, [pc, #252]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 800457c:	4313      	orrs	r3, r2
 800457e:	628b      	str	r3, [r1, #40]	; 0x28
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	3b01      	subs	r3, #1
 8004586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	3b01      	subs	r3, #1
 8004590:	025b      	lsls	r3, r3, #9
 8004592:	b29b      	uxth	r3, r3
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	3b01      	subs	r3, #1
 800459c:	041b      	lsls	r3, r3, #16
 800459e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045b0:	4931      	ldr	r1, [pc, #196]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045b6:	4b30      	ldr	r3, [pc, #192]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	492d      	ldr	r1, [pc, #180]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045c8:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	f023 0220 	bic.w	r2, r3, #32
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	4928      	ldr	r1, [pc, #160]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045da:	4b27      	ldr	r3, [pc, #156]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	4a26      	ldr	r2, [pc, #152]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045e0:	f023 0310 	bic.w	r3, r3, #16
 80045e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045e6:	4b24      	ldr	r3, [pc, #144]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ea:	4b24      	ldr	r3, [pc, #144]	; (800467c <RCCEx_PLL2_Config+0x160>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	69d2      	ldr	r2, [r2, #28]
 80045f2:	00d2      	lsls	r2, r2, #3
 80045f4:	4920      	ldr	r1, [pc, #128]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80045fa:	4b1f      	ldr	r3, [pc, #124]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	4a1e      	ldr	r2, [pc, #120]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004600:	f043 0310 	orr.w	r3, r3, #16
 8004604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800460c:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	4a19      	ldr	r2, [pc, #100]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004616:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004618:	e00f      	b.n	800463a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d106      	bne.n	800462e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004620:	4b15      	ldr	r3, [pc, #84]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	4a14      	ldr	r2, [pc, #80]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800462a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800462c:	e005      	b.n	800463a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	4a11      	ldr	r2, [pc, #68]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004638:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800463a:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004640:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004646:	f7fc ffff 	bl	8001648 <HAL_GetTick>
 800464a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800464c:	e008      	b.n	8004660 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800464e:	f7fc fffb 	bl	8001648 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e006      	b.n	800466e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <RCCEx_PLL2_Config+0x15c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0f0      	beq.n	800464e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	58024400 	.word	0x58024400
 800467c:	ffff0007 	.word	0xffff0007

08004680 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800468e:	4b53      	ldr	r3, [pc, #332]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b03      	cmp	r3, #3
 8004698:	d101      	bne.n	800469e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e099      	b.n	80047d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800469e:	4b4f      	ldr	r3, [pc, #316]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a4e      	ldr	r2, [pc, #312]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 80046a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046aa:	f7fc ffcd 	bl	8001648 <HAL_GetTick>
 80046ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046b2:	f7fc ffc9 	bl	8001648 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e086      	b.n	80047d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046c4:	4b45      	ldr	r3, [pc, #276]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f0      	bne.n	80046b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046d0:	4b42      	ldr	r3, [pc, #264]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	051b      	lsls	r3, r3, #20
 80046de:	493f      	ldr	r1, [pc, #252]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	628b      	str	r3, [r1, #40]	; 0x28
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	025b      	lsls	r3, r3, #9
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	3b01      	subs	r3, #1
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	3b01      	subs	r3, #1
 800470e:	061b      	lsls	r3, r3, #24
 8004710:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004714:	4931      	ldr	r1, [pc, #196]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800471a:	4b30      	ldr	r3, [pc, #192]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	492d      	ldr	r1, [pc, #180]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800472c:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	4928      	ldr	r1, [pc, #160]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800473e:	4b27      	ldr	r3, [pc, #156]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	4a26      	ldr	r2, [pc, #152]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004748:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800474a:	4b24      	ldr	r3, [pc, #144]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 800474c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800474e:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <RCCEx_PLL3_Config+0x160>)
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	69d2      	ldr	r2, [r2, #28]
 8004756:	00d2      	lsls	r2, r2, #3
 8004758:	4920      	ldr	r1, [pc, #128]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800475e:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	4a1e      	ldr	r2, [pc, #120]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004770:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004774:	4a19      	ldr	r2, [pc, #100]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004776:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800477a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800477c:	e00f      	b.n	800479e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d106      	bne.n	8004792 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004784:	4b15      	ldr	r3, [pc, #84]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	4a14      	ldr	r2, [pc, #80]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 800478a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800478e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004790:	e005      	b.n	800479e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	4a11      	ldr	r2, [pc, #68]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 8004798:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800479c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a0e      	ldr	r2, [pc, #56]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 80047a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047aa:	f7fc ff4d 	bl	8001648 <HAL_GetTick>
 80047ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047b0:	e008      	b.n	80047c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047b2:	f7fc ff49 	bl	8001648 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e006      	b.n	80047d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <RCCEx_PLL3_Config+0x15c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	58024400 	.word	0x58024400
 80047e0:	ffff0007 	.word	0xffff0007

080047e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e10f      	b.n	8004a16 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a87      	ldr	r2, [pc, #540]	; (8004a20 <HAL_SPI_Init+0x23c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d00f      	beq.n	8004826 <HAL_SPI_Init+0x42>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a86      	ldr	r2, [pc, #536]	; (8004a24 <HAL_SPI_Init+0x240>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00a      	beq.n	8004826 <HAL_SPI_Init+0x42>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a84      	ldr	r2, [pc, #528]	; (8004a28 <HAL_SPI_Init+0x244>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d005      	beq.n	8004826 <HAL_SPI_Init+0x42>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b0f      	cmp	r3, #15
 8004820:	d901      	bls.n	8004826 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e0f7      	b.n	8004a16 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f900 	bl	8004a2c <SPI_GetPacketSize>
 800482c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7b      	ldr	r2, [pc, #492]	; (8004a20 <HAL_SPI_Init+0x23c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00c      	beq.n	8004852 <HAL_SPI_Init+0x6e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a79      	ldr	r2, [pc, #484]	; (8004a24 <HAL_SPI_Init+0x240>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d007      	beq.n	8004852 <HAL_SPI_Init+0x6e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a78      	ldr	r2, [pc, #480]	; (8004a28 <HAL_SPI_Init+0x244>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d002      	beq.n	8004852 <HAL_SPI_Init+0x6e>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b08      	cmp	r3, #8
 8004850:	d811      	bhi.n	8004876 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004856:	4a72      	ldr	r2, [pc, #456]	; (8004a20 <HAL_SPI_Init+0x23c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a70      	ldr	r2, [pc, #448]	; (8004a24 <HAL_SPI_Init+0x240>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_SPI_Init+0x8c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a6f      	ldr	r2, [pc, #444]	; (8004a28 <HAL_SPI_Init+0x244>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d104      	bne.n	800487a <HAL_SPI_Init+0x96>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2b10      	cmp	r3, #16
 8004874:	d901      	bls.n	800487a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e0cd      	b.n	8004a16 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fc fbca 	bl	8001028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80048b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048c0:	d119      	bne.n	80048f6 <HAL_SPI_Init+0x112>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ca:	d103      	bne.n	80048d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10c      	bne.n	80048f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80048e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048e4:	d107      	bne.n	80048f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00f      	beq.n	8004922 <HAL_SPI_Init+0x13e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b06      	cmp	r3, #6
 8004908:	d90b      	bls.n	8004922 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e007      	b.n	8004932 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004930:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69da      	ldr	r2, [r3, #28]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	431a      	orrs	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004944:	ea42 0103 	orr.w	r1, r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	431a      	orrs	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004992:	ea42 0103 	orr.w	r1, r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d113      	bne.n	80049d2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0201 	bic.w	r2, r2, #1
 80049e0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	40013000 	.word	0x40013000
 8004a24:	40003800 	.word	0x40003800
 8004a28:	40003c00 	.word	0x40003c00

08004a2c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a38:	095b      	lsrs	r3, r3, #5
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	3301      	adds	r3, #1
 8004a44:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3307      	adds	r3, #7
 8004a4a:	08db      	lsrs	r3, r3, #3
 8004a4c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e049      	b.n	8004b08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d106      	bne.n	8004a8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7fc fbc7 	bl	800121c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2202      	movs	r2, #2
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	f000 faa3 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e049      	b.n	8004bb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f841 	bl	8004bbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f000 fa4c 	bl	8004fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
	...

08004bd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e0ff      	b.n	8004df2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b14      	cmp	r3, #20
 8004bfe:	f200 80f0 	bhi.w	8004de2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c02:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c5d 	.word	0x08004c5d
 8004c0c:	08004de3 	.word	0x08004de3
 8004c10:	08004de3 	.word	0x08004de3
 8004c14:	08004de3 	.word	0x08004de3
 8004c18:	08004c9d 	.word	0x08004c9d
 8004c1c:	08004de3 	.word	0x08004de3
 8004c20:	08004de3 	.word	0x08004de3
 8004c24:	08004de3 	.word	0x08004de3
 8004c28:	08004cdf 	.word	0x08004cdf
 8004c2c:	08004de3 	.word	0x08004de3
 8004c30:	08004de3 	.word	0x08004de3
 8004c34:	08004de3 	.word	0x08004de3
 8004c38:	08004d1f 	.word	0x08004d1f
 8004c3c:	08004de3 	.word	0x08004de3
 8004c40:	08004de3 	.word	0x08004de3
 8004c44:	08004de3 	.word	0x08004de3
 8004c48:	08004d61 	.word	0x08004d61
 8004c4c:	08004de3 	.word	0x08004de3
 8004c50:	08004de3 	.word	0x08004de3
 8004c54:	08004de3 	.word	0x08004de3
 8004c58:	08004da1 	.word	0x08004da1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fa68 	bl	8005138 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0208 	orr.w	r2, r2, #8
 8004c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0204 	bic.w	r2, r2, #4
 8004c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6999      	ldr	r1, [r3, #24]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	619a      	str	r2, [r3, #24]
      break;
 8004c9a:	e0a5      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fad8 	bl	8005258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6999      	ldr	r1, [r3, #24]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	619a      	str	r2, [r3, #24]
      break;
 8004cdc:	e084      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fb41 	bl	800536c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0208 	orr.w	r2, r2, #8
 8004cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0204 	bic.w	r2, r2, #4
 8004d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69d9      	ldr	r1, [r3, #28]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	61da      	str	r2, [r3, #28]
      break;
 8004d1c:	e064      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fba9 	bl	800547c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69d9      	ldr	r1, [r3, #28]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	021a      	lsls	r2, r3, #8
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	61da      	str	r2, [r3, #28]
      break;
 8004d5e:	e043      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fbf2 	bl	8005550 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0208 	orr.w	r2, r2, #8
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d9e:	e023      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fc36 	bl	8005618 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	021a      	lsls	r2, r3, #8
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004de0:	e002      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
      break;
 8004de6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop

08004dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_TIM_ConfigClockSource+0x1c>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e0dc      	b.n	8004fd2 <HAL_TIM_ConfigClockSource+0x1d6>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	4b6a      	ldr	r3, [pc, #424]	; (8004fdc <HAL_TIM_ConfigClockSource+0x1e0>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a64      	ldr	r2, [pc, #400]	; (8004fe0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	f000 80a9 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e54:	4a62      	ldr	r2, [pc, #392]	; (8004fe0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	f200 80ae 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e5c:	4a61      	ldr	r2, [pc, #388]	; (8004fe4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	f000 80a1 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e64:	4a5f      	ldr	r2, [pc, #380]	; (8004fe4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	f200 80a6 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e6c:	4a5e      	ldr	r2, [pc, #376]	; (8004fe8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	f000 8099 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e74:	4a5c      	ldr	r2, [pc, #368]	; (8004fe8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	f200 809e 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e80:	f000 8091 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e88:	f200 8096 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e90:	f000 8089 	beq.w	8004fa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e98:	f200 808e 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea0:	d03e      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0x124>
 8004ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea6:	f200 8087 	bhi.w	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eae:	f000 8086 	beq.w	8004fbe <HAL_TIM_ConfigClockSource+0x1c2>
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb6:	d87f      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004eb8:	2b70      	cmp	r3, #112	; 0x70
 8004eba:	d01a      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0xf6>
 8004ebc:	2b70      	cmp	r3, #112	; 0x70
 8004ebe:	d87b      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ec0:	2b60      	cmp	r3, #96	; 0x60
 8004ec2:	d050      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0x16a>
 8004ec4:	2b60      	cmp	r3, #96	; 0x60
 8004ec6:	d877      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ec8:	2b50      	cmp	r3, #80	; 0x50
 8004eca:	d03c      	beq.n	8004f46 <HAL_TIM_ConfigClockSource+0x14a>
 8004ecc:	2b50      	cmp	r3, #80	; 0x50
 8004ece:	d873      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d058      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0x18a>
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d86f      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ed8:	2b30      	cmp	r3, #48	; 0x30
 8004eda:	d064      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004edc:	2b30      	cmp	r3, #48	; 0x30
 8004ede:	d86b      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d060      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d867      	bhi.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d05c      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d05a      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x1aa>
 8004ef0:	e062      	b.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f02:	f000 fc6d 	bl	80057e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	609a      	str	r2, [r3, #8]
      break;
 8004f1e:	e04f      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f30:	f000 fc56 	bl	80057e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f42:	609a      	str	r2, [r3, #8]
      break;
 8004f44:	e03c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f52:	461a      	mov	r2, r3
 8004f54:	f000 fbc6 	bl	80056e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2150      	movs	r1, #80	; 0x50
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fc20 	bl	80057a4 <TIM_ITRx_SetConfig>
      break;
 8004f64:	e02c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f72:	461a      	mov	r2, r3
 8004f74:	f000 fbe5 	bl	8005742 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2160      	movs	r1, #96	; 0x60
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fc10 	bl	80057a4 <TIM_ITRx_SetConfig>
      break;
 8004f84:	e01c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f92:	461a      	mov	r2, r3
 8004f94:	f000 fba6 	bl	80056e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2140      	movs	r1, #64	; 0x40
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 fc00 	bl	80057a4 <TIM_ITRx_SetConfig>
      break;
 8004fa4:	e00c      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	f000 fbf7 	bl	80057a4 <TIM_ITRx_SetConfig>
      break;
 8004fb6:	e003      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbc:	e000      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	ffceff88 	.word	0xffceff88
 8004fe0:	00100040 	.word	0x00100040
 8004fe4:	00100030 	.word	0x00100030
 8004fe8:	00100020 	.word	0x00100020

08004fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a46      	ldr	r2, [pc, #280]	; (8005118 <TIM_Base_SetConfig+0x12c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d00f      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a43      	ldr	r2, [pc, #268]	; (800511c <TIM_Base_SetConfig+0x130>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00b      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a42      	ldr	r2, [pc, #264]	; (8005120 <TIM_Base_SetConfig+0x134>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d007      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a41      	ldr	r2, [pc, #260]	; (8005124 <TIM_Base_SetConfig+0x138>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a40      	ldr	r2, [pc, #256]	; (8005128 <TIM_Base_SetConfig+0x13c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d108      	bne.n	800503e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a35      	ldr	r2, [pc, #212]	; (8005118 <TIM_Base_SetConfig+0x12c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01f      	beq.n	8005086 <TIM_Base_SetConfig+0x9a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504c:	d01b      	beq.n	8005086 <TIM_Base_SetConfig+0x9a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a32      	ldr	r2, [pc, #200]	; (800511c <TIM_Base_SetConfig+0x130>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d017      	beq.n	8005086 <TIM_Base_SetConfig+0x9a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a31      	ldr	r2, [pc, #196]	; (8005120 <TIM_Base_SetConfig+0x134>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <TIM_Base_SetConfig+0x9a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a30      	ldr	r2, [pc, #192]	; (8005124 <TIM_Base_SetConfig+0x138>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00f      	beq.n	8005086 <TIM_Base_SetConfig+0x9a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2f      	ldr	r2, [pc, #188]	; (8005128 <TIM_Base_SetConfig+0x13c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00b      	beq.n	8005086 <TIM_Base_SetConfig+0x9a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a2e      	ldr	r2, [pc, #184]	; (800512c <TIM_Base_SetConfig+0x140>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d007      	beq.n	8005086 <TIM_Base_SetConfig+0x9a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2d      	ldr	r2, [pc, #180]	; (8005130 <TIM_Base_SetConfig+0x144>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d003      	beq.n	8005086 <TIM_Base_SetConfig+0x9a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2c      	ldr	r2, [pc, #176]	; (8005134 <TIM_Base_SetConfig+0x148>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d108      	bne.n	8005098 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a16      	ldr	r2, [pc, #88]	; (8005118 <TIM_Base_SetConfig+0x12c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00f      	beq.n	80050e4 <TIM_Base_SetConfig+0xf8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a18      	ldr	r2, [pc, #96]	; (8005128 <TIM_Base_SetConfig+0x13c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00b      	beq.n	80050e4 <TIM_Base_SetConfig+0xf8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <TIM_Base_SetConfig+0x140>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d007      	beq.n	80050e4 <TIM_Base_SetConfig+0xf8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a16      	ldr	r2, [pc, #88]	; (8005130 <TIM_Base_SetConfig+0x144>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_Base_SetConfig+0xf8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a15      	ldr	r2, [pc, #84]	; (8005134 <TIM_Base_SetConfig+0x148>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d103      	bne.n	80050ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d105      	bne.n	800510a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f023 0201 	bic.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	611a      	str	r2, [r3, #16]
  }
}
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40010000 	.word	0x40010000
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40000c00 	.word	0x40000c00
 8005128:	40010400 	.word	0x40010400
 800512c:	40014000 	.word	0x40014000
 8005130:	40014400 	.word	0x40014400
 8005134:	40014800 	.word	0x40014800

08005138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f023 0201 	bic.w	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4b37      	ldr	r3, [pc, #220]	; (8005240 <TIM_OC1_SetConfig+0x108>)
 8005164:	4013      	ands	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f023 0302 	bic.w	r3, r3, #2
 8005180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a2d      	ldr	r2, [pc, #180]	; (8005244 <TIM_OC1_SetConfig+0x10c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00f      	beq.n	80051b4 <TIM_OC1_SetConfig+0x7c>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a2c      	ldr	r2, [pc, #176]	; (8005248 <TIM_OC1_SetConfig+0x110>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00b      	beq.n	80051b4 <TIM_OC1_SetConfig+0x7c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a2b      	ldr	r2, [pc, #172]	; (800524c <TIM_OC1_SetConfig+0x114>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d007      	beq.n	80051b4 <TIM_OC1_SetConfig+0x7c>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a2a      	ldr	r2, [pc, #168]	; (8005250 <TIM_OC1_SetConfig+0x118>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_OC1_SetConfig+0x7c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a29      	ldr	r2, [pc, #164]	; (8005254 <TIM_OC1_SetConfig+0x11c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d10c      	bne.n	80051ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0308 	bic.w	r3, r3, #8
 80051ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f023 0304 	bic.w	r3, r3, #4
 80051cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1c      	ldr	r2, [pc, #112]	; (8005244 <TIM_OC1_SetConfig+0x10c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00f      	beq.n	80051f6 <TIM_OC1_SetConfig+0xbe>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a1b      	ldr	r2, [pc, #108]	; (8005248 <TIM_OC1_SetConfig+0x110>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00b      	beq.n	80051f6 <TIM_OC1_SetConfig+0xbe>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a1a      	ldr	r2, [pc, #104]	; (800524c <TIM_OC1_SetConfig+0x114>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d007      	beq.n	80051f6 <TIM_OC1_SetConfig+0xbe>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a19      	ldr	r2, [pc, #100]	; (8005250 <TIM_OC1_SetConfig+0x118>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_OC1_SetConfig+0xbe>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a18      	ldr	r2, [pc, #96]	; (8005254 <TIM_OC1_SetConfig+0x11c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d111      	bne.n	800521a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	621a      	str	r2, [r3, #32]
}
 8005234:	bf00      	nop
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	fffeff8f 	.word	0xfffeff8f
 8005244:	40010000 	.word	0x40010000
 8005248:	40010400 	.word	0x40010400
 800524c:	40014000 	.word	0x40014000
 8005250:	40014400 	.word	0x40014400
 8005254:	40014800 	.word	0x40014800

08005258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f023 0210 	bic.w	r2, r3, #16
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4b34      	ldr	r3, [pc, #208]	; (8005354 <TIM_OC2_SetConfig+0xfc>)
 8005284:	4013      	ands	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0320 	bic.w	r3, r3, #32
 80052a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a29      	ldr	r2, [pc, #164]	; (8005358 <TIM_OC2_SetConfig+0x100>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC2_SetConfig+0x68>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a28      	ldr	r2, [pc, #160]	; (800535c <TIM_OC2_SetConfig+0x104>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10d      	bne.n	80052dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a1e      	ldr	r2, [pc, #120]	; (8005358 <TIM_OC2_SetConfig+0x100>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00f      	beq.n	8005304 <TIM_OC2_SetConfig+0xac>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a1d      	ldr	r2, [pc, #116]	; (800535c <TIM_OC2_SetConfig+0x104>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00b      	beq.n	8005304 <TIM_OC2_SetConfig+0xac>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a1c      	ldr	r2, [pc, #112]	; (8005360 <TIM_OC2_SetConfig+0x108>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_OC2_SetConfig+0xac>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a1b      	ldr	r2, [pc, #108]	; (8005364 <TIM_OC2_SetConfig+0x10c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_OC2_SetConfig+0xac>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <TIM_OC2_SetConfig+0x110>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d113      	bne.n	800532c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800530a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	feff8fff 	.word	0xfeff8fff
 8005358:	40010000 	.word	0x40010000
 800535c:	40010400 	.word	0x40010400
 8005360:	40014000 	.word	0x40014000
 8005364:	40014400 	.word	0x40014400
 8005368:	40014800 	.word	0x40014800

0800536c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4b33      	ldr	r3, [pc, #204]	; (8005464 <TIM_OC3_SetConfig+0xf8>)
 8005398:	4013      	ands	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a28      	ldr	r2, [pc, #160]	; (8005468 <TIM_OC3_SetConfig+0xfc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <TIM_OC3_SetConfig+0x66>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a27      	ldr	r2, [pc, #156]	; (800546c <TIM_OC3_SetConfig+0x100>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d10d      	bne.n	80053ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1d      	ldr	r2, [pc, #116]	; (8005468 <TIM_OC3_SetConfig+0xfc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00f      	beq.n	8005416 <TIM_OC3_SetConfig+0xaa>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a1c      	ldr	r2, [pc, #112]	; (800546c <TIM_OC3_SetConfig+0x100>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00b      	beq.n	8005416 <TIM_OC3_SetConfig+0xaa>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a1b      	ldr	r2, [pc, #108]	; (8005470 <TIM_OC3_SetConfig+0x104>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d007      	beq.n	8005416 <TIM_OC3_SetConfig+0xaa>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a1a      	ldr	r2, [pc, #104]	; (8005474 <TIM_OC3_SetConfig+0x108>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_OC3_SetConfig+0xaa>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a19      	ldr	r2, [pc, #100]	; (8005478 <TIM_OC3_SetConfig+0x10c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d113      	bne.n	800543e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800541c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	621a      	str	r2, [r3, #32]
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	fffeff8f 	.word	0xfffeff8f
 8005468:	40010000 	.word	0x40010000
 800546c:	40010400 	.word	0x40010400
 8005470:	40014000 	.word	0x40014000
 8005474:	40014400 	.word	0x40014400
 8005478:	40014800 	.word	0x40014800

0800547c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4b24      	ldr	r3, [pc, #144]	; (8005538 <TIM_OC4_SetConfig+0xbc>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	031b      	lsls	r3, r3, #12
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a19      	ldr	r2, [pc, #100]	; (800553c <TIM_OC4_SetConfig+0xc0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00f      	beq.n	80054fc <TIM_OC4_SetConfig+0x80>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a18      	ldr	r2, [pc, #96]	; (8005540 <TIM_OC4_SetConfig+0xc4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00b      	beq.n	80054fc <TIM_OC4_SetConfig+0x80>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a17      	ldr	r2, [pc, #92]	; (8005544 <TIM_OC4_SetConfig+0xc8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d007      	beq.n	80054fc <TIM_OC4_SetConfig+0x80>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a16      	ldr	r2, [pc, #88]	; (8005548 <TIM_OC4_SetConfig+0xcc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_OC4_SetConfig+0x80>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a15      	ldr	r2, [pc, #84]	; (800554c <TIM_OC4_SetConfig+0xd0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d109      	bne.n	8005510 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	019b      	lsls	r3, r3, #6
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4313      	orrs	r3, r2
 800550e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	621a      	str	r2, [r3, #32]
}
 800552a:	bf00      	nop
 800552c:	371c      	adds	r7, #28
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	feff8fff 	.word	0xfeff8fff
 800553c:	40010000 	.word	0x40010000
 8005540:	40010400 	.word	0x40010400
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800

08005550 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4b21      	ldr	r3, [pc, #132]	; (8005600 <TIM_OC5_SetConfig+0xb0>)
 800557c:	4013      	ands	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005590:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a18      	ldr	r2, [pc, #96]	; (8005604 <TIM_OC5_SetConfig+0xb4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_OC5_SetConfig+0x76>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a17      	ldr	r2, [pc, #92]	; (8005608 <TIM_OC5_SetConfig+0xb8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_OC5_SetConfig+0x76>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a16      	ldr	r2, [pc, #88]	; (800560c <TIM_OC5_SetConfig+0xbc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_OC5_SetConfig+0x76>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <TIM_OC5_SetConfig+0xc0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_OC5_SetConfig+0x76>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a14      	ldr	r2, [pc, #80]	; (8005614 <TIM_OC5_SetConfig+0xc4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d109      	bne.n	80055da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	621a      	str	r2, [r3, #32]
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	fffeff8f 	.word	0xfffeff8f
 8005604:	40010000 	.word	0x40010000
 8005608:	40010400 	.word	0x40010400
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800

08005618 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4b22      	ldr	r3, [pc, #136]	; (80056cc <TIM_OC6_SetConfig+0xb4>)
 8005644:	4013      	ands	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800565a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	051b      	lsls	r3, r3, #20
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a19      	ldr	r2, [pc, #100]	; (80056d0 <TIM_OC6_SetConfig+0xb8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00f      	beq.n	8005690 <TIM_OC6_SetConfig+0x78>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a18      	ldr	r2, [pc, #96]	; (80056d4 <TIM_OC6_SetConfig+0xbc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00b      	beq.n	8005690 <TIM_OC6_SetConfig+0x78>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <TIM_OC6_SetConfig+0xc0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d007      	beq.n	8005690 <TIM_OC6_SetConfig+0x78>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a16      	ldr	r2, [pc, #88]	; (80056dc <TIM_OC6_SetConfig+0xc4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d003      	beq.n	8005690 <TIM_OC6_SetConfig+0x78>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <TIM_OC6_SetConfig+0xc8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d109      	bne.n	80056a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005696:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	029b      	lsls	r3, r3, #10
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	feff8fff 	.word	0xfeff8fff
 80056d0:	40010000 	.word	0x40010000
 80056d4:	40010400 	.word	0x40010400
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40014400 	.word	0x40014400
 80056e0:	40014800 	.word	0x40014800

080056e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f023 0201 	bic.w	r2, r3, #1
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800570e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f023 030a 	bic.w	r3, r3, #10
 8005720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005742:	b480      	push	{r7}
 8005744:	b087      	sub	sp, #28
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f023 0210 	bic.w	r2, r3, #16
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800576c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	031b      	lsls	r3, r3, #12
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800577e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <TIM_ITRx_SetConfig+0x38>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057bc:	683a      	ldr	r2, [r7, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f043 0307 	orr.w	r3, r3, #7
 80057c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	609a      	str	r2, [r3, #8]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	ffcfff8f 	.word	0xffcfff8f

080057e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	021a      	lsls	r2, r3, #8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	431a      	orrs	r2, r3
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4313      	orrs	r3, r2
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	609a      	str	r2, [r3, #8]
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005834:	2302      	movs	r3, #2
 8005836:	e06d      	b.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a30      	ldr	r2, [pc, #192]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a2f      	ldr	r2, [pc, #188]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d108      	bne.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005872:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005884:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4313      	orrs	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a20      	ldr	r2, [pc, #128]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d022      	beq.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058aa:	d01d      	beq.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1d      	ldr	r2, [pc, #116]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d018      	beq.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1c      	ldr	r2, [pc, #112]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d013      	beq.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1a      	ldr	r2, [pc, #104]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00e      	beq.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a15      	ldr	r2, [pc, #84]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d009      	beq.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a16      	ldr	r2, [pc, #88]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a15      	ldr	r2, [pc, #84]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d10c      	bne.n	8005902 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	40010000 	.word	0x40010000
 8005924:	40010400 	.word	0x40010400
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	40001800 	.word	0x40001800
 8005938:	40014000 	.word	0x40014000

0800593c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e042      	b.n	80059d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7fb fcb7 	bl	80012d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2224      	movs	r2, #36	; 0x24
 800596a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 ff22 	bl	80067d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8b3 	bl	8005af8 <UART_SetConfig>
 8005992:	4603      	mov	r3, r0
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e01b      	b.n	80059d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 ffa1 	bl	8006914 <UART_CheckIdleState>
 80059d2:	4603      	mov	r3, r0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08a      	sub	sp, #40	; 0x28
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d17b      	bne.n	8005aee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <HAL_UART_Transmit+0x26>
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e074      	b.n	8005af0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2221      	movs	r2, #33	; 0x21
 8005a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a16:	f7fb fe17 	bl	8001648 <HAL_GetTick>
 8005a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	88fa      	ldrh	r2, [r7, #6]
 8005a20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	88fa      	ldrh	r2, [r7, #6]
 8005a28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a34:	d108      	bne.n	8005a48 <HAL_UART_Transmit+0x6c>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	e003      	b.n	8005a50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a50:	e030      	b.n	8005ab4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2180      	movs	r1, #128	; 0x80
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f001 f803 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e03d      	b.n	8005af0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	3302      	adds	r3, #2
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e007      	b.n	8005aa2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	781a      	ldrb	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1c8      	bne.n	8005a52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2140      	movs	r1, #64	; 0x40
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 ffcc 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d005      	beq.n	8005ae2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e006      	b.n	8005af0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e000      	b.n	8005af0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005aee:	2302      	movs	r3, #2
  }
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005afc:	b092      	sub	sp, #72	; 0x48
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	431a      	orrs	r2, r3
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4bbe      	ldr	r3, [pc, #760]	; (8005e20 <UART_SetConfig+0x328>)
 8005b28:	4013      	ands	r3, r2
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4ab3      	ldr	r2, [pc, #716]	; (8005e24 <UART_SetConfig+0x32c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d004      	beq.n	8005b64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b60:	4313      	orrs	r3, r2
 8005b62:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	4baf      	ldr	r3, [pc, #700]	; (8005e28 <UART_SetConfig+0x330>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b74:	430b      	orrs	r3, r1
 8005b76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	f023 010f 	bic.w	r1, r3, #15
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4aa6      	ldr	r2, [pc, #664]	; (8005e2c <UART_SetConfig+0x334>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d177      	bne.n	8005c88 <UART_SetConfig+0x190>
 8005b98:	4ba5      	ldr	r3, [pc, #660]	; (8005e30 <UART_SetConfig+0x338>)
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ba0:	2b28      	cmp	r3, #40	; 0x28
 8005ba2:	d86d      	bhi.n	8005c80 <UART_SetConfig+0x188>
 8005ba4:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <UART_SetConfig+0xb4>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005c51 	.word	0x08005c51
 8005bb0:	08005c81 	.word	0x08005c81
 8005bb4:	08005c81 	.word	0x08005c81
 8005bb8:	08005c81 	.word	0x08005c81
 8005bbc:	08005c81 	.word	0x08005c81
 8005bc0:	08005c81 	.word	0x08005c81
 8005bc4:	08005c81 	.word	0x08005c81
 8005bc8:	08005c81 	.word	0x08005c81
 8005bcc:	08005c59 	.word	0x08005c59
 8005bd0:	08005c81 	.word	0x08005c81
 8005bd4:	08005c81 	.word	0x08005c81
 8005bd8:	08005c81 	.word	0x08005c81
 8005bdc:	08005c81 	.word	0x08005c81
 8005be0:	08005c81 	.word	0x08005c81
 8005be4:	08005c81 	.word	0x08005c81
 8005be8:	08005c81 	.word	0x08005c81
 8005bec:	08005c61 	.word	0x08005c61
 8005bf0:	08005c81 	.word	0x08005c81
 8005bf4:	08005c81 	.word	0x08005c81
 8005bf8:	08005c81 	.word	0x08005c81
 8005bfc:	08005c81 	.word	0x08005c81
 8005c00:	08005c81 	.word	0x08005c81
 8005c04:	08005c81 	.word	0x08005c81
 8005c08:	08005c81 	.word	0x08005c81
 8005c0c:	08005c69 	.word	0x08005c69
 8005c10:	08005c81 	.word	0x08005c81
 8005c14:	08005c81 	.word	0x08005c81
 8005c18:	08005c81 	.word	0x08005c81
 8005c1c:	08005c81 	.word	0x08005c81
 8005c20:	08005c81 	.word	0x08005c81
 8005c24:	08005c81 	.word	0x08005c81
 8005c28:	08005c81 	.word	0x08005c81
 8005c2c:	08005c71 	.word	0x08005c71
 8005c30:	08005c81 	.word	0x08005c81
 8005c34:	08005c81 	.word	0x08005c81
 8005c38:	08005c81 	.word	0x08005c81
 8005c3c:	08005c81 	.word	0x08005c81
 8005c40:	08005c81 	.word	0x08005c81
 8005c44:	08005c81 	.word	0x08005c81
 8005c48:	08005c81 	.word	0x08005c81
 8005c4c:	08005c79 	.word	0x08005c79
 8005c50:	2301      	movs	r3, #1
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c56:	e326      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5e:	e322      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005c60:	2308      	movs	r3, #8
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c66:	e31e      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6e:	e31a      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005c70:	2320      	movs	r3, #32
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c76:	e316      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005c78:	2340      	movs	r3, #64	; 0x40
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7e:	e312      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005c80:	2380      	movs	r3, #128	; 0x80
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c86:	e30e      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a69      	ldr	r2, [pc, #420]	; (8005e34 <UART_SetConfig+0x33c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d130      	bne.n	8005cf4 <UART_SetConfig+0x1fc>
 8005c92:	4b67      	ldr	r3, [pc, #412]	; (8005e30 <UART_SetConfig+0x338>)
 8005c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b05      	cmp	r3, #5
 8005c9c:	d826      	bhi.n	8005cec <UART_SetConfig+0x1f4>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <UART_SetConfig+0x1ac>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cbd 	.word	0x08005cbd
 8005ca8:	08005cc5 	.word	0x08005cc5
 8005cac:	08005ccd 	.word	0x08005ccd
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc2:	e2f0      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cca:	e2ec      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005ccc:	2308      	movs	r3, #8
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd2:	e2e8      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cda:	e2e4      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005cdc:	2320      	movs	r3, #32
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce2:	e2e0      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005ce4:	2340      	movs	r3, #64	; 0x40
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cea:	e2dc      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e2d8      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a4f      	ldr	r2, [pc, #316]	; (8005e38 <UART_SetConfig+0x340>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d130      	bne.n	8005d60 <UART_SetConfig+0x268>
 8005cfe:	4b4c      	ldr	r3, [pc, #304]	; (8005e30 <UART_SetConfig+0x338>)
 8005d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	2b05      	cmp	r3, #5
 8005d08:	d826      	bhi.n	8005d58 <UART_SetConfig+0x260>
 8005d0a:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <UART_SetConfig+0x218>)
 8005d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d10:	08005d29 	.word	0x08005d29
 8005d14:	08005d31 	.word	0x08005d31
 8005d18:	08005d39 	.word	0x08005d39
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d49 	.word	0x08005d49
 8005d24:	08005d51 	.word	0x08005d51
 8005d28:	2300      	movs	r3, #0
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e2ba      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005d30:	2304      	movs	r3, #4
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d36:	e2b6      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005d38:	2308      	movs	r3, #8
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3e:	e2b2      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005d40:	2310      	movs	r3, #16
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d46:	e2ae      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005d48:	2320      	movs	r3, #32
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4e:	e2aa      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005d50:	2340      	movs	r3, #64	; 0x40
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e2a6      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005d58:	2380      	movs	r3, #128	; 0x80
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5e:	e2a2      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a35      	ldr	r2, [pc, #212]	; (8005e3c <UART_SetConfig+0x344>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d130      	bne.n	8005dcc <UART_SetConfig+0x2d4>
 8005d6a:	4b31      	ldr	r3, [pc, #196]	; (8005e30 <UART_SetConfig+0x338>)
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	2b05      	cmp	r3, #5
 8005d74:	d826      	bhi.n	8005dc4 <UART_SetConfig+0x2cc>
 8005d76:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <UART_SetConfig+0x284>)
 8005d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7c:	08005d95 	.word	0x08005d95
 8005d80:	08005d9d 	.word	0x08005d9d
 8005d84:	08005da5 	.word	0x08005da5
 8005d88:	08005dad 	.word	0x08005dad
 8005d8c:	08005db5 	.word	0x08005db5
 8005d90:	08005dbd 	.word	0x08005dbd
 8005d94:	2300      	movs	r3, #0
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9a:	e284      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005da2:	e280      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005da4:	2308      	movs	r3, #8
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e27c      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005dac:	2310      	movs	r3, #16
 8005dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db2:	e278      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005db4:	2320      	movs	r3, #32
 8005db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dba:	e274      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005dbc:	2340      	movs	r3, #64	; 0x40
 8005dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc2:	e270      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005dc4:	2380      	movs	r3, #128	; 0x80
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dca:	e26c      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1b      	ldr	r2, [pc, #108]	; (8005e40 <UART_SetConfig+0x348>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d142      	bne.n	8005e5c <UART_SetConfig+0x364>
 8005dd6:	4b16      	ldr	r3, [pc, #88]	; (8005e30 <UART_SetConfig+0x338>)
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	2b05      	cmp	r3, #5
 8005de0:	d838      	bhi.n	8005e54 <UART_SetConfig+0x35c>
 8005de2:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0x2f0>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005e01 	.word	0x08005e01
 8005dec:	08005e09 	.word	0x08005e09
 8005df0:	08005e11 	.word	0x08005e11
 8005df4:	08005e19 	.word	0x08005e19
 8005df8:	08005e45 	.word	0x08005e45
 8005dfc:	08005e4d 	.word	0x08005e4d
 8005e00:	2300      	movs	r3, #0
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e06:	e24e      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0e:	e24a      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005e10:	2308      	movs	r3, #8
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e16:	e246      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1e:	e242      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005e20:	cfff69f3 	.word	0xcfff69f3
 8005e24:	58000c00 	.word	0x58000c00
 8005e28:	11fff4ff 	.word	0x11fff4ff
 8005e2c:	40011000 	.word	0x40011000
 8005e30:	58024400 	.word	0x58024400
 8005e34:	40004400 	.word	0x40004400
 8005e38:	40004800 	.word	0x40004800
 8005e3c:	40004c00 	.word	0x40004c00
 8005e40:	40005000 	.word	0x40005000
 8005e44:	2320      	movs	r3, #32
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4a:	e22c      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005e4c:	2340      	movs	r3, #64	; 0x40
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e52:	e228      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005e54:	2380      	movs	r3, #128	; 0x80
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5a:	e224      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4ab1      	ldr	r2, [pc, #708]	; (8006128 <UART_SetConfig+0x630>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d176      	bne.n	8005f54 <UART_SetConfig+0x45c>
 8005e66:	4bb1      	ldr	r3, [pc, #708]	; (800612c <UART_SetConfig+0x634>)
 8005e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e6e:	2b28      	cmp	r3, #40	; 0x28
 8005e70:	d86c      	bhi.n	8005f4c <UART_SetConfig+0x454>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <UART_SetConfig+0x380>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005f1d 	.word	0x08005f1d
 8005e7c:	08005f4d 	.word	0x08005f4d
 8005e80:	08005f4d 	.word	0x08005f4d
 8005e84:	08005f4d 	.word	0x08005f4d
 8005e88:	08005f4d 	.word	0x08005f4d
 8005e8c:	08005f4d 	.word	0x08005f4d
 8005e90:	08005f4d 	.word	0x08005f4d
 8005e94:	08005f4d 	.word	0x08005f4d
 8005e98:	08005f25 	.word	0x08005f25
 8005e9c:	08005f4d 	.word	0x08005f4d
 8005ea0:	08005f4d 	.word	0x08005f4d
 8005ea4:	08005f4d 	.word	0x08005f4d
 8005ea8:	08005f4d 	.word	0x08005f4d
 8005eac:	08005f4d 	.word	0x08005f4d
 8005eb0:	08005f4d 	.word	0x08005f4d
 8005eb4:	08005f4d 	.word	0x08005f4d
 8005eb8:	08005f2d 	.word	0x08005f2d
 8005ebc:	08005f4d 	.word	0x08005f4d
 8005ec0:	08005f4d 	.word	0x08005f4d
 8005ec4:	08005f4d 	.word	0x08005f4d
 8005ec8:	08005f4d 	.word	0x08005f4d
 8005ecc:	08005f4d 	.word	0x08005f4d
 8005ed0:	08005f4d 	.word	0x08005f4d
 8005ed4:	08005f4d 	.word	0x08005f4d
 8005ed8:	08005f35 	.word	0x08005f35
 8005edc:	08005f4d 	.word	0x08005f4d
 8005ee0:	08005f4d 	.word	0x08005f4d
 8005ee4:	08005f4d 	.word	0x08005f4d
 8005ee8:	08005f4d 	.word	0x08005f4d
 8005eec:	08005f4d 	.word	0x08005f4d
 8005ef0:	08005f4d 	.word	0x08005f4d
 8005ef4:	08005f4d 	.word	0x08005f4d
 8005ef8:	08005f3d 	.word	0x08005f3d
 8005efc:	08005f4d 	.word	0x08005f4d
 8005f00:	08005f4d 	.word	0x08005f4d
 8005f04:	08005f4d 	.word	0x08005f4d
 8005f08:	08005f4d 	.word	0x08005f4d
 8005f0c:	08005f4d 	.word	0x08005f4d
 8005f10:	08005f4d 	.word	0x08005f4d
 8005f14:	08005f4d 	.word	0x08005f4d
 8005f18:	08005f45 	.word	0x08005f45
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f22:	e1c0      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005f24:	2304      	movs	r3, #4
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2a:	e1bc      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f32:	e1b8      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005f34:	2310      	movs	r3, #16
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3a:	e1b4      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005f3c:	2320      	movs	r3, #32
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f42:	e1b0      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005f44:	2340      	movs	r3, #64	; 0x40
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4a:	e1ac      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f52:	e1a8      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a75      	ldr	r2, [pc, #468]	; (8006130 <UART_SetConfig+0x638>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d130      	bne.n	8005fc0 <UART_SetConfig+0x4c8>
 8005f5e:	4b73      	ldr	r3, [pc, #460]	; (800612c <UART_SetConfig+0x634>)
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d826      	bhi.n	8005fb8 <UART_SetConfig+0x4c0>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <UART_SetConfig+0x478>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f89 	.word	0x08005f89
 8005f74:	08005f91 	.word	0x08005f91
 8005f78:	08005f99 	.word	0x08005f99
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fa9 	.word	0x08005fa9
 8005f84:	08005fb1 	.word	0x08005fb1
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8e:	e18a      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005f90:	2304      	movs	r3, #4
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f96:	e186      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005f98:	2308      	movs	r3, #8
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9e:	e182      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa6:	e17e      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005fa8:	2320      	movs	r3, #32
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fae:	e17a      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005fb0:	2340      	movs	r3, #64	; 0x40
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb6:	e176      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005fb8:	2380      	movs	r3, #128	; 0x80
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fbe:	e172      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a5b      	ldr	r2, [pc, #364]	; (8006134 <UART_SetConfig+0x63c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d130      	bne.n	800602c <UART_SetConfig+0x534>
 8005fca:	4b58      	ldr	r3, [pc, #352]	; (800612c <UART_SetConfig+0x634>)
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	2b05      	cmp	r3, #5
 8005fd4:	d826      	bhi.n	8006024 <UART_SetConfig+0x52c>
 8005fd6:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <UART_SetConfig+0x4e4>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	08005ff5 	.word	0x08005ff5
 8005fe0:	08005ffd 	.word	0x08005ffd
 8005fe4:	08006005 	.word	0x08006005
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08006015 	.word	0x08006015
 8005ff0:	0800601d 	.word	0x0800601d
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e154      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006002:	e150      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006004:	2308      	movs	r3, #8
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600a:	e14c      	b.n	80062a6 <UART_SetConfig+0x7ae>
 800600c:	2310      	movs	r3, #16
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006012:	e148      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006014:	2320      	movs	r3, #32
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601a:	e144      	b.n	80062a6 <UART_SetConfig+0x7ae>
 800601c:	2340      	movs	r3, #64	; 0x40
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006022:	e140      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602a:	e13c      	b.n	80062a6 <UART_SetConfig+0x7ae>
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a41      	ldr	r2, [pc, #260]	; (8006138 <UART_SetConfig+0x640>)
 8006032:	4293      	cmp	r3, r2
 8006034:	f040 8082 	bne.w	800613c <UART_SetConfig+0x644>
 8006038:	4b3c      	ldr	r3, [pc, #240]	; (800612c <UART_SetConfig+0x634>)
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006040:	2b28      	cmp	r3, #40	; 0x28
 8006042:	d86d      	bhi.n	8006120 <UART_SetConfig+0x628>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <UART_SetConfig+0x554>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	080060f1 	.word	0x080060f1
 8006050:	08006121 	.word	0x08006121
 8006054:	08006121 	.word	0x08006121
 8006058:	08006121 	.word	0x08006121
 800605c:	08006121 	.word	0x08006121
 8006060:	08006121 	.word	0x08006121
 8006064:	08006121 	.word	0x08006121
 8006068:	08006121 	.word	0x08006121
 800606c:	080060f9 	.word	0x080060f9
 8006070:	08006121 	.word	0x08006121
 8006074:	08006121 	.word	0x08006121
 8006078:	08006121 	.word	0x08006121
 800607c:	08006121 	.word	0x08006121
 8006080:	08006121 	.word	0x08006121
 8006084:	08006121 	.word	0x08006121
 8006088:	08006121 	.word	0x08006121
 800608c:	08006101 	.word	0x08006101
 8006090:	08006121 	.word	0x08006121
 8006094:	08006121 	.word	0x08006121
 8006098:	08006121 	.word	0x08006121
 800609c:	08006121 	.word	0x08006121
 80060a0:	08006121 	.word	0x08006121
 80060a4:	08006121 	.word	0x08006121
 80060a8:	08006121 	.word	0x08006121
 80060ac:	08006109 	.word	0x08006109
 80060b0:	08006121 	.word	0x08006121
 80060b4:	08006121 	.word	0x08006121
 80060b8:	08006121 	.word	0x08006121
 80060bc:	08006121 	.word	0x08006121
 80060c0:	08006121 	.word	0x08006121
 80060c4:	08006121 	.word	0x08006121
 80060c8:	08006121 	.word	0x08006121
 80060cc:	08006111 	.word	0x08006111
 80060d0:	08006121 	.word	0x08006121
 80060d4:	08006121 	.word	0x08006121
 80060d8:	08006121 	.word	0x08006121
 80060dc:	08006121 	.word	0x08006121
 80060e0:	08006121 	.word	0x08006121
 80060e4:	08006121 	.word	0x08006121
 80060e8:	08006121 	.word	0x08006121
 80060ec:	08006119 	.word	0x08006119
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f6:	e0d6      	b.n	80062a6 <UART_SetConfig+0x7ae>
 80060f8:	2304      	movs	r3, #4
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fe:	e0d2      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006100:	2308      	movs	r3, #8
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006106:	e0ce      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006108:	2310      	movs	r3, #16
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610e:	e0ca      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006110:	2320      	movs	r3, #32
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006116:	e0c6      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006118:	2340      	movs	r3, #64	; 0x40
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611e:	e0c2      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006126:	e0be      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006128:	40011400 	.word	0x40011400
 800612c:	58024400 	.word	0x58024400
 8006130:	40007800 	.word	0x40007800
 8006134:	40007c00 	.word	0x40007c00
 8006138:	40011800 	.word	0x40011800
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4aad      	ldr	r2, [pc, #692]	; (80063f8 <UART_SetConfig+0x900>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d176      	bne.n	8006234 <UART_SetConfig+0x73c>
 8006146:	4bad      	ldr	r3, [pc, #692]	; (80063fc <UART_SetConfig+0x904>)
 8006148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800614e:	2b28      	cmp	r3, #40	; 0x28
 8006150:	d86c      	bhi.n	800622c <UART_SetConfig+0x734>
 8006152:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <UART_SetConfig+0x660>)
 8006154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006158:	080061fd 	.word	0x080061fd
 800615c:	0800622d 	.word	0x0800622d
 8006160:	0800622d 	.word	0x0800622d
 8006164:	0800622d 	.word	0x0800622d
 8006168:	0800622d 	.word	0x0800622d
 800616c:	0800622d 	.word	0x0800622d
 8006170:	0800622d 	.word	0x0800622d
 8006174:	0800622d 	.word	0x0800622d
 8006178:	08006205 	.word	0x08006205
 800617c:	0800622d 	.word	0x0800622d
 8006180:	0800622d 	.word	0x0800622d
 8006184:	0800622d 	.word	0x0800622d
 8006188:	0800622d 	.word	0x0800622d
 800618c:	0800622d 	.word	0x0800622d
 8006190:	0800622d 	.word	0x0800622d
 8006194:	0800622d 	.word	0x0800622d
 8006198:	0800620d 	.word	0x0800620d
 800619c:	0800622d 	.word	0x0800622d
 80061a0:	0800622d 	.word	0x0800622d
 80061a4:	0800622d 	.word	0x0800622d
 80061a8:	0800622d 	.word	0x0800622d
 80061ac:	0800622d 	.word	0x0800622d
 80061b0:	0800622d 	.word	0x0800622d
 80061b4:	0800622d 	.word	0x0800622d
 80061b8:	08006215 	.word	0x08006215
 80061bc:	0800622d 	.word	0x0800622d
 80061c0:	0800622d 	.word	0x0800622d
 80061c4:	0800622d 	.word	0x0800622d
 80061c8:	0800622d 	.word	0x0800622d
 80061cc:	0800622d 	.word	0x0800622d
 80061d0:	0800622d 	.word	0x0800622d
 80061d4:	0800622d 	.word	0x0800622d
 80061d8:	0800621d 	.word	0x0800621d
 80061dc:	0800622d 	.word	0x0800622d
 80061e0:	0800622d 	.word	0x0800622d
 80061e4:	0800622d 	.word	0x0800622d
 80061e8:	0800622d 	.word	0x0800622d
 80061ec:	0800622d 	.word	0x0800622d
 80061f0:	0800622d 	.word	0x0800622d
 80061f4:	0800622d 	.word	0x0800622d
 80061f8:	08006225 	.word	0x08006225
 80061fc:	2301      	movs	r3, #1
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e050      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006204:	2304      	movs	r3, #4
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e04c      	b.n	80062a6 <UART_SetConfig+0x7ae>
 800620c:	2308      	movs	r3, #8
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006212:	e048      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006214:	2310      	movs	r3, #16
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621a:	e044      	b.n	80062a6 <UART_SetConfig+0x7ae>
 800621c:	2320      	movs	r3, #32
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006222:	e040      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006224:	2340      	movs	r3, #64	; 0x40
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622a:	e03c      	b.n	80062a6 <UART_SetConfig+0x7ae>
 800622c:	2380      	movs	r3, #128	; 0x80
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006232:	e038      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a71      	ldr	r2, [pc, #452]	; (8006400 <UART_SetConfig+0x908>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d130      	bne.n	80062a0 <UART_SetConfig+0x7a8>
 800623e:	4b6f      	ldr	r3, [pc, #444]	; (80063fc <UART_SetConfig+0x904>)
 8006240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	2b05      	cmp	r3, #5
 8006248:	d826      	bhi.n	8006298 <UART_SetConfig+0x7a0>
 800624a:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <UART_SetConfig+0x758>)
 800624c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006250:	08006269 	.word	0x08006269
 8006254:	08006271 	.word	0x08006271
 8006258:	08006279 	.word	0x08006279
 800625c:	08006281 	.word	0x08006281
 8006260:	08006289 	.word	0x08006289
 8006264:	08006291 	.word	0x08006291
 8006268:	2302      	movs	r3, #2
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626e:	e01a      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006270:	2304      	movs	r3, #4
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006276:	e016      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006278:	2308      	movs	r3, #8
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627e:	e012      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006280:	2310      	movs	r3, #16
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006286:	e00e      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006288:	2320      	movs	r3, #32
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628e:	e00a      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006290:	2340      	movs	r3, #64	; 0x40
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006296:	e006      	b.n	80062a6 <UART_SetConfig+0x7ae>
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629e:	e002      	b.n	80062a6 <UART_SetConfig+0x7ae>
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a55      	ldr	r2, [pc, #340]	; (8006400 <UART_SetConfig+0x908>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	f040 80f8 	bne.w	80064a2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	dc46      	bgt.n	8006348 <UART_SetConfig+0x850>
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	db75      	blt.n	80063aa <UART_SetConfig+0x8b2>
 80062be:	3b02      	subs	r3, #2
 80062c0:	2b1e      	cmp	r3, #30
 80062c2:	d872      	bhi.n	80063aa <UART_SetConfig+0x8b2>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <UART_SetConfig+0x7d4>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	0800634f 	.word	0x0800634f
 80062d0:	080063ab 	.word	0x080063ab
 80062d4:	08006357 	.word	0x08006357
 80062d8:	080063ab 	.word	0x080063ab
 80062dc:	080063ab 	.word	0x080063ab
 80062e0:	080063ab 	.word	0x080063ab
 80062e4:	08006367 	.word	0x08006367
 80062e8:	080063ab 	.word	0x080063ab
 80062ec:	080063ab 	.word	0x080063ab
 80062f0:	080063ab 	.word	0x080063ab
 80062f4:	080063ab 	.word	0x080063ab
 80062f8:	080063ab 	.word	0x080063ab
 80062fc:	080063ab 	.word	0x080063ab
 8006300:	080063ab 	.word	0x080063ab
 8006304:	08006377 	.word	0x08006377
 8006308:	080063ab 	.word	0x080063ab
 800630c:	080063ab 	.word	0x080063ab
 8006310:	080063ab 	.word	0x080063ab
 8006314:	080063ab 	.word	0x080063ab
 8006318:	080063ab 	.word	0x080063ab
 800631c:	080063ab 	.word	0x080063ab
 8006320:	080063ab 	.word	0x080063ab
 8006324:	080063ab 	.word	0x080063ab
 8006328:	080063ab 	.word	0x080063ab
 800632c:	080063ab 	.word	0x080063ab
 8006330:	080063ab 	.word	0x080063ab
 8006334:	080063ab 	.word	0x080063ab
 8006338:	080063ab 	.word	0x080063ab
 800633c:	080063ab 	.word	0x080063ab
 8006340:	080063ab 	.word	0x080063ab
 8006344:	0800639d 	.word	0x0800639d
 8006348:	2b40      	cmp	r3, #64	; 0x40
 800634a:	d02a      	beq.n	80063a2 <UART_SetConfig+0x8aa>
 800634c:	e02d      	b.n	80063aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800634e:	f7fd fe27 	bl	8003fa0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006352:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006354:	e02f      	b.n	80063b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800635a:	4618      	mov	r0, r3
 800635c:	f7fd fe36 	bl	8003fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006364:	e027      	b.n	80063b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006366:	f107 0318 	add.w	r3, r7, #24
 800636a:	4618      	mov	r0, r3
 800636c:	f7fd ff82 	bl	8004274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006374:	e01f      	b.n	80063b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006376:	4b21      	ldr	r3, [pc, #132]	; (80063fc <UART_SetConfig+0x904>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0320 	and.w	r3, r3, #32
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006382:	4b1e      	ldr	r3, [pc, #120]	; (80063fc <UART_SetConfig+0x904>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	08db      	lsrs	r3, r3, #3
 8006388:	f003 0303 	and.w	r3, r3, #3
 800638c:	4a1d      	ldr	r2, [pc, #116]	; (8006404 <UART_SetConfig+0x90c>)
 800638e:	fa22 f303 	lsr.w	r3, r2, r3
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006394:	e00f      	b.n	80063b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006396:	4b1b      	ldr	r3, [pc, #108]	; (8006404 <UART_SetConfig+0x90c>)
 8006398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800639a:	e00c      	b.n	80063b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800639c:	4b1a      	ldr	r3, [pc, #104]	; (8006408 <UART_SetConfig+0x910>)
 800639e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063a0:	e009      	b.n	80063b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063a8:	e005      	b.n	80063b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80063b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 81ee 	beq.w	800679a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	4a12      	ldr	r2, [pc, #72]	; (800640c <UART_SetConfig+0x914>)
 80063c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063c8:	461a      	mov	r2, r3
 80063ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80063d0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	4413      	add	r3, r2
 80063dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063de:	429a      	cmp	r2, r3
 80063e0:	d305      	bcc.n	80063ee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d910      	bls.n	8006410 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80063f4:	e1d1      	b.n	800679a <UART_SetConfig+0xca2>
 80063f6:	bf00      	nop
 80063f8:	40011c00 	.word	0x40011c00
 80063fc:	58024400 	.word	0x58024400
 8006400:	58000c00 	.word	0x58000c00
 8006404:	03d09000 	.word	0x03d09000
 8006408:	003d0900 	.word	0x003d0900
 800640c:	08006eac 	.word	0x08006eac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006412:	2200      	movs	r2, #0
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	60fa      	str	r2, [r7, #12]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	4ac0      	ldr	r2, [pc, #768]	; (8006720 <UART_SetConfig+0xc28>)
 800641e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006422:	b29b      	uxth	r3, r3
 8006424:	2200      	movs	r2, #0
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	607a      	str	r2, [r7, #4]
 800642a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800642e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006432:	f7f9 ff5b 	bl	80002ec <__aeabi_uldivmod>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4610      	mov	r0, r2
 800643c:	4619      	mov	r1, r3
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	f04f 0300 	mov.w	r3, #0
 8006446:	020b      	lsls	r3, r1, #8
 8006448:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800644c:	0202      	lsls	r2, r0, #8
 800644e:	6979      	ldr	r1, [r7, #20]
 8006450:	6849      	ldr	r1, [r1, #4]
 8006452:	0849      	lsrs	r1, r1, #1
 8006454:	2000      	movs	r0, #0
 8006456:	460c      	mov	r4, r1
 8006458:	4605      	mov	r5, r0
 800645a:	eb12 0804 	adds.w	r8, r2, r4
 800645e:	eb43 0905 	adc.w	r9, r3, r5
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	469a      	mov	sl, r3
 800646a:	4693      	mov	fp, r2
 800646c:	4652      	mov	r2, sl
 800646e:	465b      	mov	r3, fp
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7f9 ff3a 	bl	80002ec <__aeabi_uldivmod>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4613      	mov	r3, r2
 800647e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006486:	d308      	bcc.n	800649a <UART_SetConfig+0x9a2>
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800648e:	d204      	bcs.n	800649a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006496:	60da      	str	r2, [r3, #12]
 8006498:	e17f      	b.n	800679a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064a0:	e17b      	b.n	800679a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064aa:	f040 80bd 	bne.w	8006628 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80064ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	dc48      	bgt.n	8006548 <UART_SetConfig+0xa50>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	db7b      	blt.n	80065b2 <UART_SetConfig+0xaba>
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d879      	bhi.n	80065b2 <UART_SetConfig+0xaba>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x9cc>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	0800654f 	.word	0x0800654f
 80064c8:	08006557 	.word	0x08006557
 80064cc:	080065b3 	.word	0x080065b3
 80064d0:	080065b3 	.word	0x080065b3
 80064d4:	0800655f 	.word	0x0800655f
 80064d8:	080065b3 	.word	0x080065b3
 80064dc:	080065b3 	.word	0x080065b3
 80064e0:	080065b3 	.word	0x080065b3
 80064e4:	0800656f 	.word	0x0800656f
 80064e8:	080065b3 	.word	0x080065b3
 80064ec:	080065b3 	.word	0x080065b3
 80064f0:	080065b3 	.word	0x080065b3
 80064f4:	080065b3 	.word	0x080065b3
 80064f8:	080065b3 	.word	0x080065b3
 80064fc:	080065b3 	.word	0x080065b3
 8006500:	080065b3 	.word	0x080065b3
 8006504:	0800657f 	.word	0x0800657f
 8006508:	080065b3 	.word	0x080065b3
 800650c:	080065b3 	.word	0x080065b3
 8006510:	080065b3 	.word	0x080065b3
 8006514:	080065b3 	.word	0x080065b3
 8006518:	080065b3 	.word	0x080065b3
 800651c:	080065b3 	.word	0x080065b3
 8006520:	080065b3 	.word	0x080065b3
 8006524:	080065b3 	.word	0x080065b3
 8006528:	080065b3 	.word	0x080065b3
 800652c:	080065b3 	.word	0x080065b3
 8006530:	080065b3 	.word	0x080065b3
 8006534:	080065b3 	.word	0x080065b3
 8006538:	080065b3 	.word	0x080065b3
 800653c:	080065b3 	.word	0x080065b3
 8006540:	080065b3 	.word	0x080065b3
 8006544:	080065a5 	.word	0x080065a5
 8006548:	2b40      	cmp	r3, #64	; 0x40
 800654a:	d02e      	beq.n	80065aa <UART_SetConfig+0xab2>
 800654c:	e031      	b.n	80065b2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800654e:	f7fc fb3d 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8006552:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006554:	e033      	b.n	80065be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006556:	f7fc fb4f 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 800655a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800655c:	e02f      	b.n	80065be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800655e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006562:	4618      	mov	r0, r3
 8006564:	f7fd fd32 	bl	8003fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800656c:	e027      	b.n	80065be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800656e:	f107 0318 	add.w	r3, r7, #24
 8006572:	4618      	mov	r0, r3
 8006574:	f7fd fe7e 	bl	8004274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800657c:	e01f      	b.n	80065be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800657e:	4b69      	ldr	r3, [pc, #420]	; (8006724 <UART_SetConfig+0xc2c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800658a:	4b66      	ldr	r3, [pc, #408]	; (8006724 <UART_SetConfig+0xc2c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	08db      	lsrs	r3, r3, #3
 8006590:	f003 0303 	and.w	r3, r3, #3
 8006594:	4a64      	ldr	r2, [pc, #400]	; (8006728 <UART_SetConfig+0xc30>)
 8006596:	fa22 f303 	lsr.w	r3, r2, r3
 800659a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800659c:	e00f      	b.n	80065be <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800659e:	4b62      	ldr	r3, [pc, #392]	; (8006728 <UART_SetConfig+0xc30>)
 80065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065a2:	e00c      	b.n	80065be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065a4:	4b61      	ldr	r3, [pc, #388]	; (800672c <UART_SetConfig+0xc34>)
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065a8:	e009      	b.n	80065be <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065b0:	e005      	b.n	80065be <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80065bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80ea 	beq.w	800679a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	4a55      	ldr	r2, [pc, #340]	; (8006720 <UART_SetConfig+0xc28>)
 80065cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065d0:	461a      	mov	r2, r3
 80065d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d8:	005a      	lsls	r2, r3, #1
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	441a      	add	r2, r3
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ee:	2b0f      	cmp	r3, #15
 80065f0:	d916      	bls.n	8006620 <UART_SetConfig+0xb28>
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f8:	d212      	bcs.n	8006620 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	f023 030f 	bic.w	r3, r3, #15
 8006602:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	b29b      	uxth	r3, r3
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	b29a      	uxth	r2, r3
 8006610:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006612:	4313      	orrs	r3, r2
 8006614:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800661c:	60da      	str	r2, [r3, #12]
 800661e:	e0bc      	b.n	800679a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006626:	e0b8      	b.n	800679a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006628:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800662c:	2b20      	cmp	r3, #32
 800662e:	dc4b      	bgt.n	80066c8 <UART_SetConfig+0xbd0>
 8006630:	2b00      	cmp	r3, #0
 8006632:	f2c0 8087 	blt.w	8006744 <UART_SetConfig+0xc4c>
 8006636:	2b20      	cmp	r3, #32
 8006638:	f200 8084 	bhi.w	8006744 <UART_SetConfig+0xc4c>
 800663c:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0xb4c>)
 800663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006642:	bf00      	nop
 8006644:	080066cf 	.word	0x080066cf
 8006648:	080066d7 	.word	0x080066d7
 800664c:	08006745 	.word	0x08006745
 8006650:	08006745 	.word	0x08006745
 8006654:	080066df 	.word	0x080066df
 8006658:	08006745 	.word	0x08006745
 800665c:	08006745 	.word	0x08006745
 8006660:	08006745 	.word	0x08006745
 8006664:	080066ef 	.word	0x080066ef
 8006668:	08006745 	.word	0x08006745
 800666c:	08006745 	.word	0x08006745
 8006670:	08006745 	.word	0x08006745
 8006674:	08006745 	.word	0x08006745
 8006678:	08006745 	.word	0x08006745
 800667c:	08006745 	.word	0x08006745
 8006680:	08006745 	.word	0x08006745
 8006684:	080066ff 	.word	0x080066ff
 8006688:	08006745 	.word	0x08006745
 800668c:	08006745 	.word	0x08006745
 8006690:	08006745 	.word	0x08006745
 8006694:	08006745 	.word	0x08006745
 8006698:	08006745 	.word	0x08006745
 800669c:	08006745 	.word	0x08006745
 80066a0:	08006745 	.word	0x08006745
 80066a4:	08006745 	.word	0x08006745
 80066a8:	08006745 	.word	0x08006745
 80066ac:	08006745 	.word	0x08006745
 80066b0:	08006745 	.word	0x08006745
 80066b4:	08006745 	.word	0x08006745
 80066b8:	08006745 	.word	0x08006745
 80066bc:	08006745 	.word	0x08006745
 80066c0:	08006745 	.word	0x08006745
 80066c4:	08006737 	.word	0x08006737
 80066c8:	2b40      	cmp	r3, #64	; 0x40
 80066ca:	d037      	beq.n	800673c <UART_SetConfig+0xc44>
 80066cc:	e03a      	b.n	8006744 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ce:	f7fc fa7d 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 80066d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066d4:	e03c      	b.n	8006750 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066d6:	f7fc fa8f 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 80066da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066dc:	e038      	b.n	8006750 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fd fc72 	bl	8003fcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ec:	e030      	b.n	8006750 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ee:	f107 0318 	add.w	r3, r7, #24
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fd fdbe 	bl	8004274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066fc:	e028      	b.n	8006750 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066fe:	4b09      	ldr	r3, [pc, #36]	; (8006724 <UART_SetConfig+0xc2c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b00      	cmp	r3, #0
 8006708:	d012      	beq.n	8006730 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800670a:	4b06      	ldr	r3, [pc, #24]	; (8006724 <UART_SetConfig+0xc2c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	08db      	lsrs	r3, r3, #3
 8006710:	f003 0303 	and.w	r3, r3, #3
 8006714:	4a04      	ldr	r2, [pc, #16]	; (8006728 <UART_SetConfig+0xc30>)
 8006716:	fa22 f303 	lsr.w	r3, r2, r3
 800671a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800671c:	e018      	b.n	8006750 <UART_SetConfig+0xc58>
 800671e:	bf00      	nop
 8006720:	08006eac 	.word	0x08006eac
 8006724:	58024400 	.word	0x58024400
 8006728:	03d09000 	.word	0x03d09000
 800672c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006730:	4b24      	ldr	r3, [pc, #144]	; (80067c4 <UART_SetConfig+0xccc>)
 8006732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006734:	e00c      	b.n	8006750 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006736:	4b24      	ldr	r3, [pc, #144]	; (80067c8 <UART_SetConfig+0xcd0>)
 8006738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800673a:	e009      	b.n	8006750 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800673c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006740:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006742:	e005      	b.n	8006750 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800674e:	bf00      	nop
    }

    if (pclk != 0U)
 8006750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d021      	beq.n	800679a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	4a1c      	ldr	r2, [pc, #112]	; (80067cc <UART_SetConfig+0xcd4>)
 800675c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006760:	461a      	mov	r2, r3
 8006762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006764:	fbb3 f2f2 	udiv	r2, r3, r2
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	085b      	lsrs	r3, r3, #1
 800676e:	441a      	add	r2, r3
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	fbb2 f3f3 	udiv	r3, r2, r3
 8006778:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	2b0f      	cmp	r3, #15
 800677e:	d909      	bls.n	8006794 <UART_SetConfig+0xc9c>
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006786:	d205      	bcs.n	8006794 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678a:	b29a      	uxth	r2, r3
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	60da      	str	r2, [r3, #12]
 8006792:	e002      	b.n	800679a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2201      	movs	r2, #1
 800679e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2200      	movs	r2, #0
 80067ae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2200      	movs	r2, #0
 80067b4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80067b6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3748      	adds	r7, #72	; 0x48
 80067be:	46bd      	mov	sp, r7
 80067c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067c4:	03d09000 	.word	0x03d09000
 80067c8:	003d0900 	.word	0x003d0900
 80067cc:	08006eac 	.word	0x08006eac

080067d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01a      	beq.n	80068e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ce:	d10a      	bne.n	80068e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00a      	beq.n	8006908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	605a      	str	r2, [r3, #4]
  }
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b098      	sub	sp, #96	; 0x60
 8006918:	af02      	add	r7, sp, #8
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006924:	f7fa fe90 	bl	8001648 <HAL_GetTick>
 8006928:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b08      	cmp	r3, #8
 8006936:	d12f      	bne.n	8006998 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006940:	2200      	movs	r2, #0
 8006942:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f88e 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d022      	beq.n	8006998 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006962:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006966:	653b      	str	r3, [r7, #80]	; 0x50
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006970:	647b      	str	r3, [r7, #68]	; 0x44
 8006972:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006976:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006978:	e841 2300 	strex	r3, r2, [r1]
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800697e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1e6      	bne.n	8006952 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e063      	b.n	8006a60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d149      	bne.n	8006a3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ae:	2200      	movs	r2, #0
 80069b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f857 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d03c      	beq.n	8006a3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	623b      	str	r3, [r7, #32]
   return(result);
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069de:	633b      	str	r3, [r7, #48]	; 0x30
 80069e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e6      	bne.n	80069c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f023 0301 	bic.w	r3, r3, #1
 8006a08:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a12:	61fa      	str	r2, [r7, #28]
 8006a14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	69b9      	ldr	r1, [r7, #24]
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e5      	bne.n	80069f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e012      	b.n	8006a60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3758      	adds	r7, #88	; 0x58
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	4613      	mov	r3, r2
 8006a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a78:	e04f      	b.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a80:	d04b      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a82:	f7fa fde1 	bl	8001648 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d302      	bcc.n	8006a98 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e04e      	b.n	8006b3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d037      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b80      	cmp	r3, #128	; 0x80
 8006aae:	d034      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b40      	cmp	r3, #64	; 0x40
 8006ab4:	d031      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d110      	bne.n	8006ae6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2208      	movs	r2, #8
 8006aca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f839 	bl	8006b44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e029      	b.n	8006b3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af4:	d111      	bne.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006afe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f81f 	bl	8006b44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e00f      	b.n	8006b3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69da      	ldr	r2, [r3, #28]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4013      	ands	r3, r2
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	bf0c      	ite	eq
 8006b2a:	2301      	moveq	r3, #1
 8006b2c:	2300      	movne	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d0a0      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b095      	sub	sp, #84	; 0x54
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e6      	bne.n	8006b4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3308      	adds	r3, #8
 8006b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	e853 3f00 	ldrex	r3, [r3]
 8006b8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	4b1e      	ldr	r3, [pc, #120]	; (8006c0c <UART_EndRxTransfer+0xc8>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e5      	bne.n	8006b7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d118      	bne.n	8006bec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 0310 	bic.w	r3, r3, #16
 8006bce:	647b      	str	r3, [r7, #68]	; 0x44
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6979      	ldr	r1, [r7, #20]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	613b      	str	r3, [r7, #16]
   return(result);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e6      	bne.n	8006bba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c00:	bf00      	nop
 8006c02:	3754      	adds	r7, #84	; 0x54
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	effffffe 	.word	0xeffffffe

08006c10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c22:	2302      	movs	r3, #2
 8006c24:	e027      	b.n	8006c76 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2224      	movs	r2, #36	; 0x24
 8006c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d101      	bne.n	8006c9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c96:	2302      	movs	r3, #2
 8006c98:	e02d      	b.n	8006cf6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2224      	movs	r2, #36	; 0x24
 8006ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0201 	bic.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f850 	bl	8006d7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e02d      	b.n	8006d72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2224      	movs	r2, #36	; 0x24
 8006d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f812 	bl	8006d7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d108      	bne.n	8006d9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d9c:	e031      	b.n	8006e02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d9e:	2310      	movs	r3, #16
 8006da0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006da2:	2310      	movs	r3, #16
 8006da4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	0e5b      	lsrs	r3, r3, #25
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	0f5b      	lsrs	r3, r3, #29
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	7b3a      	ldrb	r2, [r7, #12]
 8006dca:	4911      	ldr	r1, [pc, #68]	; (8006e10 <UARTEx_SetNbDataToProcess+0x94>)
 8006dcc:	5c8a      	ldrb	r2, [r1, r2]
 8006dce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dd2:	7b3a      	ldrb	r2, [r7, #12]
 8006dd4:	490f      	ldr	r1, [pc, #60]	; (8006e14 <UARTEx_SetNbDataToProcess+0x98>)
 8006dd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
 8006de6:	7b7a      	ldrb	r2, [r7, #13]
 8006de8:	4909      	ldr	r1, [pc, #36]	; (8006e10 <UARTEx_SetNbDataToProcess+0x94>)
 8006dea:	5c8a      	ldrb	r2, [r1, r2]
 8006dec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006df0:	7b7a      	ldrb	r2, [r7, #13]
 8006df2:	4908      	ldr	r1, [pc, #32]	; (8006e14 <UARTEx_SetNbDataToProcess+0x98>)
 8006df4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006df6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	08006ec4 	.word	0x08006ec4
 8006e14:	08006ecc 	.word	0x08006ecc

08006e18 <memset>:
 8006e18:	4402      	add	r2, r0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d100      	bne.n	8006e22 <memset+0xa>
 8006e20:	4770      	bx	lr
 8006e22:	f803 1b01 	strb.w	r1, [r3], #1
 8006e26:	e7f9      	b.n	8006e1c <memset+0x4>

08006e28 <__libc_init_array>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4d0d      	ldr	r5, [pc, #52]	; (8006e60 <__libc_init_array+0x38>)
 8006e2c:	4c0d      	ldr	r4, [pc, #52]	; (8006e64 <__libc_init_array+0x3c>)
 8006e2e:	1b64      	subs	r4, r4, r5
 8006e30:	10a4      	asrs	r4, r4, #2
 8006e32:	2600      	movs	r6, #0
 8006e34:	42a6      	cmp	r6, r4
 8006e36:	d109      	bne.n	8006e4c <__libc_init_array+0x24>
 8006e38:	4d0b      	ldr	r5, [pc, #44]	; (8006e68 <__libc_init_array+0x40>)
 8006e3a:	4c0c      	ldr	r4, [pc, #48]	; (8006e6c <__libc_init_array+0x44>)
 8006e3c:	f000 f818 	bl	8006e70 <_init>
 8006e40:	1b64      	subs	r4, r4, r5
 8006e42:	10a4      	asrs	r4, r4, #2
 8006e44:	2600      	movs	r6, #0
 8006e46:	42a6      	cmp	r6, r4
 8006e48:	d105      	bne.n	8006e56 <__libc_init_array+0x2e>
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e50:	4798      	blx	r3
 8006e52:	3601      	adds	r6, #1
 8006e54:	e7ee      	b.n	8006e34 <__libc_init_array+0xc>
 8006e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5a:	4798      	blx	r3
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	e7f2      	b.n	8006e46 <__libc_init_array+0x1e>
 8006e60:	08006edc 	.word	0x08006edc
 8006e64:	08006edc 	.word	0x08006edc
 8006e68:	08006edc 	.word	0x08006edc
 8006e6c:	08006ee0 	.word	0x08006ee0

08006e70 <_init>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	bf00      	nop
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr

08006e7c <_fini>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr
